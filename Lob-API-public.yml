openapi: 3.0.3

info:
  title: Lob API
  version: "2020-02-11"
  description: >
    The Lob API is organized around REST. Our API is designed to have predictable,
    resource-oriented URLs and uses HTTP response codes to indicate any API errors
  license:
    name: MIT
    url: https://mit-license.org/
  contact:
    name: Lob Developer Experience
    url: https://support.lob.com/
    email: lob-openapi@lob.com
  termsOfService: https://www.lob.com/legal

servers:
  - url: https://api.lob.com/v1
    description: production

tags:
  - name: Addresses
    description: A frictionless address book for use with the print and mail API.

  - name: API Keys
    x-traitTag: true
    description: |
      Lob authenticates your API requests using your account's API keys.
      If you do not include your key when making an API request, or use
      one that is incorrect or outdated, Lob returns an error with a `401`
      HTTP response code. You can find all API keys in your dashboard under Settings.

      There are two types of API keys: *secret* and *publishable*.

      - **Secret API keys** should be kept confidential and only stored on your own servers.
      Your account's secret API key can perform any API request to Lob without restriction.

      - **Publishable API keys** are limited to US verifications, international verifications,
      and US autocomplete requests. While we encourage you to use a secret key for maximum
      security, you can publish these keys to JavaScript code or in an Android or iPhone app
      without exposing print and mail services or your secret key. Publishable keys are always
      prefixed with `[environment]_pub`.

      Every type comes with a pair of keys: one for the testing environment and one for the
      live environment. We recommend reading Test and Live Environments for more information.

  - name: Asset URLs
    x-traitTag: true
    description: >-
      All asset URLs returned by the Lob API (postcards, letters, thumbnails,
      etc) are signed links served over HTTPS. All links returned will expire in
      30 days to prevent mis-sharing. Each time a GET request is initiated, a
      new signed URL will be generated.

  - name: Bank Accounts
    description: Bank Accounts allow you to store your bank account securely in our system.

  - name: Beta Program
    description: |
      Here at Lob, we pride ourselves on building high quality platform capabilities rapidly
      and iteratively, so we can constantly be delivering additional value to our customers.
      When evaluating a new product or feature from Lob, you may see that it has been released in Beta.

      Typically, something in Beta means that the feature is early in its lifecycle here at
      Lob. While we fully stand behind the quality of everything we release in Beta, we do
      anticipate receiving a higher level of customer feedback on Beta features, as well as a
      faster pace of changes from our engineering team in response to that feedback.

      By participating in a Lob Beta program, you will have the opportunity to get early access
      to a new product capability, as well as having a unique opportunity to influence the product's
      direction with your feedback.

      You should also anticipate that features in Beta may have functional or design limitations,
      and might change rapidly as we receive customer feedback and make improvements. In particular,
      new APIs in Beta may also go through more frequent versioning and version deprecation cycles
      than our more mature APIs.

      If you are participating in a Beta program and want to provide feedback, please feel free to
      [contact us](https://lob.com/support#contact)!

  - name: Bulk Intl Verifications
    description: Verify a list of non-US addresses.

  - name: Bulk US Verifications
    description: Verify a list of US addresses.

  - name: Cancellation Windows
    x-traitTag: true
    description: |
      By default, all new accounts have a 5 minute cancellation window for postcards,
      self mailers, letters, and checks. Within that timeframe, you can cancel
      mailings from production, free of charge. Once the window has passed for a
      postcard, self mailer, letter, or check, the mailing is no longer cancelable.
      In addition, certain customers can customize their cancellation windows by
      product in their [Dashboard Settings](https://dashboard.lob.com/#). Upgrade to
      the appropriate [Print & Mail Edition](https://dashboard.lob.com/#/settings/editions)
      to automatically gain access to this ability. For more details on this feature,
      check out our [Cancellation Guide](https://lob.com/guides#cancellation_windows).

      If you schedule a postcard, self mailer, letter, or check for up to 180 days
      in the future by supplying the `send_date` parameter, that will override any
      cancellation window you may have for that product.

  - name: Certificates
    description: A certificate store to manage client identities.

  - name: Checks
    description: Checks allow you to send payments via physical checks.

  - name: Idempotent Requests
    x-traitTag: true
    description: >-
      Lob supports idempotency for safely retrying `POST` requests to create
      postcards, self mailers, letters, and checks without accidentally creating
      duplicates.


      For example, if a request to create a check fails due to a network error,
      you can safely retry the same request with the same idempotency key and
      guarantee that only one check will ultimately be created and sent. When a
      request is sent with an idempotency key for an already created resource,
      the response object for the existing resource will be returned.


      To perform an idempotent `POST` request to one of the mailpiece product
      endpoints, provide an additional `Idempotency-Key` header or an `idempotency_key`
      query parameter to the request. If multiple idempotency keys are provided,
      the request will fail. How you create unique keys is up to you, but we
      suggest using random values, such as V4 UUIDs. Idempotency keys are intended
      to prevent issues over a short periods of time, therefore keys expire after
      24 hours. Keys are unique by mode (Test vs. Live) as well as by resource
      (postcard vs. letter, etc.).


      By default, all `GET` and `DELETE` requests are idempotent by nature, so
      they do not require an additional idempotency key.


      For more help integrating idempotency keys, refer to our
      [implementation guide](https://lob.com/guides#idempotent_request).


      **Headers**
      <table>
        <tbody>
          <tr>
            <td>Idempotency-Key:</td>
            <td>
              optional
              <p style="color:#888;margin-top:0px;">
                <font size="-1">
                  A string of no longer than 256 characters
                  that uniquely identifies this resource.
                </font>
              </p>
            </td>
          </tr>
        </tbody>
      </table>


      **Query Parameters**
      <table>
        <tbody>
          <tr>
            <td>idempotency-key:</td>
            <td>
              optional
              <p style="color:#888;margin-top:0px;">
                <font size="-1">
                  A string of no longer than 256 characters
                  that uniquely identifies this resource.
                </font>
              </p>
            </td>
          </tr>
        </tbody>
      </table>


      **<span style="color:#6683a2">Example Request</span>**


      ```bash
        curl https://api.lob.com/v1/postcards \
          -u test_0dc8d51e0acffcb1880e0f19c79b2f5b0cc: \
          -H "Idempotency-Key: 026e7634-24d7-486c-a0bb-4a17fd0eebc5" \
          -d "to=adr_bae820679f3f536b" \
          -d "from=adr_210a8d4b0b76d77b" \
          --data-urlencode "front=<html style='margin: 130px; font-size: 50;'>Front HTML for {{name}}</html>" \
          --data-urlencode "back=<html style='margin: 130px; font-size: 50;'>Back HTML</html>" \
          -d "merge_variables[name]=Harry"
      ```

  - name: Intl Verifications
    description: Address verification for non-US addresses

  - name: Intl Verifications Test Environment
    x-traitTag: true
    description: |
      When verifying international addresses, you'll likely want to test against
      a wide array of addresses to ensure you're handling responses correctly.
      With your test API key, requests that use specific values for `primary_line`
      let you explore the responses to many types of addresses:

      | DELIVERABILITY OF SAMPLE RESPONSE | SET `primary_line` TO    |
      |-----------------------------------|--------------------------|
      | `deliverable`                     | deliverable              |
      | `deliverable_missing_info`        | deliverable missing info |
      | `undeliverable`                   | undeliverable            |
      | `no_match`                        | no match                 |

      See the `test` request & response examples under [Intl Verification Examples](#operation/intl_verification) within the
      "Verify an international address section" in Intl Verifications.

      You can rely on the response from these examples generally matching the response
      you'd see in the live environment with an address of that type (excluding the `recipient` field).

      The test API key does not perform any verification, automatic correction, or standardization
      for addresses. If you wish to try these features out, use our [live demo](https://lob.com/address-verification)
      or the free plan (see [our pricing](https://lob.com/pricing/address-verification) for details).

  - name: Letters
    description: Easily print and mail letters.

  - name: Libraries
    x-traitTag: true
    description: |
      Please visit our [Github](https://www.github.com/lob) for a list of our supported libraries.
      - [Ruby](https://github.com/lob/lob-ruby)
      - [PHP](https://github.com/lob/lob-php)
      - [Node.js](https://github.com/lob/lob-node)
      - [Python](https://github.com/lob/lob-python)
      - [Java](https://github.com/lob/lob-java)
      - [Elixir](https://github.com/lob/lob-elixir)

  - name: NCOA
    x-traitTag: true
    description: |
      National Change of Address (NCOA) is a service offered by the USPS, which allows individuals
      or businesses who have recently moved to have any mail forwarded from their previous address
      to their new address. As a CASS-certified Address Verification Provider, Lob also offers NCOA
      functionality to our Print & Mail customers. With the Lob NCOA feature enabled, Postcards,
      Letters, Checks and Addresses can automatically be corrected to reflect an individual's or business's
      new address in the case that they have moved (only if they have registered for NCOA with the USPS).
      Due to privacy concerns and USPS constraints, for customers with NCOA enabled, our API responses
      for a limited set of endpoints differ slightly in the case when an address has been changed through NCOA.

      NOTE: This feature is exclusive to certain customers. Upgrade to the appropriate [Print & Mail Edition](https://dashboard.lob.com/#/settings/editions) to gain access.

      For more information, see our [NCOA guide](https://lob.com/guides#national_change).

  - name: NCOA Live Environment
    x-traitTag: true
    description: |
      Though there are no changes to API requests, there are significant changes to our API responses, but
      only in the event that an address has been changed through NCOA. If an address has not been changed
      through NCOA, the response would be identical to our standard responses, except the addition of a
      `recipient_moved` field, which is `false` for unchanged addresses.

      If an address has been changed through NCOA, we are required to suppress the following response
      fields for that address:
      - `address_line1`
      - `address_line2`
      - The +4 portion of the ZIP+4 (5-digit ZIP code will still be present)

      See the `ncoa_us_live` example under [Responses](#operation/create_address) within the "Create an Address" section in Addresses
      (along with the corresponding request under "Requests").

  - name: NCOA Test Environment
    x-traitTag: true
    description: |
      In addition to sending live requests, you may also want to simulate what an NCOA response might
      look like so that you can ensure your application behaves as expected. The behavior of NCOA in
      Lob's Test Environment is very similar to our [US Verifications Test Mode](https://docs.lob.com/#us-verification-test-environment).

      To simulate an NCOA request, send a POST request to any of the four endpoints below with an `address_line1` field equal to `NCOA`:
      - `POST /v1/addresses`
      - `POST /v1/checks`
      - `POST /v1/letters`
      - `POST /v1/postcards`
      - `POST /v1/self_mailers`

      A static address will always be returned, as documented in the `ncoa_us_test` example under [Responses](#operation/create_address) within the "Create an Address"
      section in Addresses (along with the corresponding request under "Requests").

  - name: Postcards
    description: Easily print and mail postcards.

  - name: Rate Limiting
    x-traitTag: true
    description: >-
      To prevent misuse, we enforce a rate limit on an API Key and endpoint basis,
      similar to the way many other APIs enforce rate limits. By default, all accounts
      and their corresponding Test and Live API Keys have a rate limit of 150 requests
      per 5 seconds per endpoint. The `POST /v1/us_verifications` and `POST /v1/us_autocompletions`
      endpoints have a limit of 300 requests per 5 seconds for all accounts.


      When your application exceeds the rate limit for a given API endpoint, the
      Lob API will return an HTTP 429 "Too Many Requests" response code instead of
      the variety of codes you would find across the other API endpoints.


      **HTTP Headers**


      HTTP headers are returned on each request to a rate limited endpoint. Ensure
      that you inspect these headers during your requests as they provide relevant
      data on how many more requests your application is allowed to make for the
      endpoint you just utilized.


      While the headers are documented here in titlecase, HTTP headers are case
      insensitive and certain libraries may transform them to lowercase. Please
      inspect your headers carefully to see how they will be represented in your
      chosen development scenario.

      <table>
        <tbody>
          <tr>
            <td>X-Rate-Limit-Limit:</td>
            <td>the rate limit ceiling for a given request</td>
          </tr>
          <tr>
            <td>X-Rate-Limit-Remaining:</td>
            <td>the number of requests remaining in this window</td>
          </tr>
          <tr>
            <td>X-Rate-Limit-Reset:</td>
            <td>the time at which the rate limit window resets (in <a  href="https://en.wikipedia.org/wiki/Unix_time"  target="_blank">UTC epoch seconds</a>)
          </td>
          </tr>
        </tbody>
      </table>


      **<span style="color:#6683a2">Example HTTP Headers</span>**


      ```
        X-Rate-Limit-Limit:150
        X-Rate-Limit-Remaining:100
        X-Rate-Limit-Reset:1528749846
      ```


      **<span style="color:rgb(102,131,162)">Example Response</span>**


      If you hit the rate limit on a given endpoint, this is the body of the HTTP
      429 message that you will see:


      ```javascript
        {
          "error": {
            "message": "Rate limit exceeded. Please wait 5 seconds and try your request again.",
            "code": "rate_limit_exceeded",
            "status_code": 429
          }
        }
      ```

  - name: Request Bodies
    x-traitTag: true
    description: >-
      When manually sending a POST HTTP request directly to the Lob API, without
      the use of a library, you may represent the body as either a Form URL
      Encoded request, a JSON document, or a Multipart Form Data request.


      However, if you're using one of our [libraries](index.html#tag/Libraries),
      the generation of the request bodies is done for you automatically and you don't
      need to worry about the format.


      **<span style="color:#6683a2">Form URL Encoded</span>**


      This request body encoding is accompanied with the
      `Content-Type: application/x-www-form-urlencoded` header. The content is an
      example of what the [Verify a US address](index.html#operation/us_verification)
      endpoint accepts. An example of a request body encoded in this format follows.


      ```javascript
        primary_line=185 Berry Street&city=San Francisco&state=CA&zip_code=94107
      ```


      **<span style="color:#6683a2">JSON</span>**


      This request body encoding is accompanied with the `Content-Type: application/json` header.
      The content is an example of what the [Verify a US address endpoint](index.html#operation/us_verification)
      accepts. An example of a request body encoded in this format follows.


      ```javascript
        {
          "primary_line": "185 Berry Street",
          "city": "San Francisco",
          "state": "CA",
          "zip_code": "94107"
        }
      ```


      **<span style="color:#6683a2">Multipart Form Data</span>**


      This request body encoding is accompanied with the `Content-Type: multipart/form-data`
      header. This is the only format that can be used for uploading a file to the API. The
      content is an example of what the [Create a check](index.html#operation/create_check)
      endpoint accepts. An example of a request body encoded in this format follows.


      ```javascript
        --------------------------7015ebe79c0a5f8c
        Content-Disposition: form-data; name="description"

        Demo Letter
        --------------------------7015ebe79c0a5f8c
        Content-Disposition: form-data; name="to"

        adr_bae820679f3f536b
        --------------------------7015ebe79c0a5f8c
        Content-Disposition: form-data; name="from"

        adr_210a8d4b0b76d77b
        --------------------------7015ebe79c0a5f8c
        Content-Disposition: form-data; name="file"; filename="file.pdf"
        Content-Type: application/pdf

        <FILE CONTENT>
        --------------------------7015ebe79c0a5f8c
        Content-Disposition: form-data; name="color"

        true
        --------------------------7015ebe79c0a5f8c--
      ```

  - name: Scheduled Mailings
    x-traitTag: true
    description: >-
      Postcards, self mailers, letters, and checks can be scheduled to be sent up
      to 180 days in advance. You can use this feature to:

      - Create automated drip campaigns (e.g. send a postcard at 15, 30, and 60
      days)
      - Schedule recurring sends
      - Plan your mailing schedule ahead of time


      Up until the time a mailing is scheduled for, it can also be canceled.
      If you use this feature in conjunction with [a cancellation window](
      index.html#tag/Cancellation-Windows), the `send_date` parameter will always
      take precedence.


      For implementation details, see documentation below for each respective
      endpoint. For more help, see our [Scheduled Mailings Guide](https://lob.com/guides#scheduled_mailing).


      This feature is exclusive to certain customers. Upgrade to the appropriate
      [Print & Mail Edition](https://dashboard.lob.com/#/settings/editions) to
      gain access.


      **<span style="color:#6683a2">
        Example Create Request using Send Date
      </span>**

      ```bash
        curl https://api.lob.com/v1/postcards \
          -u test_0dc8d51e0acffcb1880e0f19c79b2f5b0cc: \
          -d "description=Demo Future Postcard" \
          -d "to=adr_bae820679f3f536b" \
          -d "from=adr_210a8d4b0b76d77b" \
          -d "front=tmpl_b846a20859ae11a" \
          -d "back=tmpl_01b0d396a10c268" \
          -d "merge_variables[name]=Harry" \
          -d "send_date=2021-07-26"
      ```

  - name: Self Mailers
    description: Easily print and mail self mailers.

  - name: Template Versions
    description: Versioning for your reusable HTML print and mail templates.

  - name: Templates
    description: Versioned, reusable HTML Templates for use with the print and mail API.

  - name: Test and Live Environments
    x-traitTag: true
    description: >-
      To make the API as explorable as possible, accounts have test and live
      environment API keys. You're not charged any fees in the test environment,
      so we encourage you to use it to try out services, perform quality
      assurance, and run automated testing. Objects―addresses, letters, checks,
      etc―in one environment cannot be manipulated by objects in the other.
      In general, a payment method (either credit card or ACH account) must be
      added to your account to make live API requests. However, a payment method
      is not required for the first 300 live requests per month to the
      `/v1/us_verifications` endpoint. After the first 300 requests, you will
      begin receiving errors with status code `403`.
      Requests made in the test environment always validate request arguments,
      simulate live environment behavior, and enforce rate limits. _They never
      print, mail nor, for verification services, verify addresses._ The US &
      International verification services trigger behavior with specific
      argument values, and, if you plan on using those, we recommend reading US
      Verification Test Environment and Intl Verification Test Environment.
      To switch between environments, use the appropriate key for that
      environment when performing a request. You can find each environment's API
      key in your dashboard under Settings; test API keys are always prefixed
      with `test_` and production API keys with `live_`.

  - name: US Autocompletions
    description: >
      Given partial address information, this endpoint returns up to 10 address suggestions.

  - name: US Autocompletions Test Environment
    x-traitTag: true
    description: |
      Your test API key does not autocomplete US addresses and is used to simulate
      behavior. With your test API key, requests with specific values for `address_prefix`
      return predetermined values. When `address_prefix` is set to:

      - `0 suggestions` - Returns no suggestions
      - `[PRIMARY NUMBER] s[uggestion]` - Returns a maximum of ten predefined suggested addresses.
        `[PRIMARY NUMBER]` does not have to be a valid primary number when sending a test request.
        Each additional letter in `suggestion` reduces the number of suggestions by one (e.g.
        `1 su` returns 9 suggested addresses). `[PRIMARY NUMBER]` does not affect the number of
        suggestions returned.

      City and state filters work as expected and filter the list of predetermined suggested addresses.

      See the `test` request & response examples under [Autocomplete Examples](#operation/autocompletion) within the "Autocomplete
      a partial address" section in US Autocompletions.

  - name: US Verifications
    description: >
      Validate, automatically correct, and standardize the addresses in your
      address book based on USPS's [Coding Accuracy Support System (CASS)](https://postalpro.usps.com/certifications/cass).

  - name: US Verifications Test Environment
    x-traitTag: true
    description: |
      When verifying US addresses, you'll likely want to test against a wide array of addresses to
      ensure you're handling responses correctly. With your test API key, requests that use specific
      values for `address` or `primary_line` and (if using `primary_line`) an arbitrary five digit
      number for `zip_code` (e.g. "11111") let you explore the responses to many types of addresses:

      | ADDRESS TYPE FOR SAMPLE RESPONSE                         | deliverability               | SET `primary_line` OR `address` TO |
      |----------------------------------------------------------| -----------------------------|------------------------------------|
      | Commercial highrise                                      | deliverable                  | `commercial highrise`              |
      | Residential highrise                                     | deliverable                  | `residential highrise`             |
      | Residential house                                        | deliverable                  | `residential house`                |
      | PO Box                                                   | deliverable                  | `po box`                           |
      | Rural route                                              | deliverable                  | `rural route`                      |
      | Puerty Rico address w/ urbanization                      | deliverable                  | `puerto rico`                      |
      | Military address                                         | deliverable                  | `military`                         |
      | Department of state                                      | deliverable                  | `department of state`              |
      | Generic deliverable                                      | deliverable                  | `deliverable`                      |
      | Missing a suite number                                   | deliverable_missing_unit     | `missing unit`                     |
      | Suite number doesn't exist                               | deliverable_incorrect_unit   | `incorrect unit`                   |
      | Residential house with unnecessary suite number          | deliverable_unnecessary_unit | `unnecessary unit`                 |
      | Undeliverable and block matched                          | undeliverable                | `undeliverable block match`        |
      | Undeliverable and no block matched                       | undeliverable                | `undeliverable no match`           |

      See the `test` request & response examples under [US Verification Examples](#operation/us_verification) within the
      "Verify a US or US territory address" section in US Verifications.

      You can rely on the response from these examples generally matching the response you'd see in the live environment with an
      address of that type (excluding the `recipient` field).

      The test API key does not perform any verification, automatic correction, or standardization for addresses. If you wish to
      try these features out, use our [live demo](https://lob.com/address-verification) or the free plan (see [our pricing](https://lob.com/pricing/address-verification) for details).

  - name: Versioning
    x-traitTag: true
    description: >-
      When backwards-incompatible changes are made to the API, a new dated version
      is released. The latest version of the API is version **2020-02-11**. You can
      view your version and upgrade to the latest version in your
      [Dashboard Settings](https://dashboard.lob.com/#/settings/keys). You will
      only need to specify a version if you would like to test a newer version of
      the API without doing a full upgrade. The API will return an error if a
      version older than your current one is passed in. See API Changelog for a
      full list of breaking changes.


      **<span style="color:#6683a2">Example Request</span>**


      ```bash
        curl https://api.lob.com/v1/addresses \
          -u test_0dc8d51e0acffcb1880e0f19c79b2f5b0cc: \
          -H "Lob-Version: 2020-02-11"
      ```

  - name: Webhooks
    x-traitTag: true
    description: |
      Webhooks are an easy way to get notifications on events happening asynchronously
      within Lob's architecture. For example, when a postcard gets a "Processed For
      Delivery" tracking event, an event object of type `postcard.processed_for_delivery`
      will be created. If you are subscribed to that event type in that Environment
      (Test vs. Live), Lob will send that event to any URLs you've specified via an
      HTTP POST request. In Live mode, you can only have as many webhooks as allotted
      in your current [Print & Mail Edition](https://dashboard.lob.com/#/settings/editions).
      There is no limit in Test mode.

      You can view and create [webhooks](https://dashboard.lob.com/#/webhooks) on the
      Lob Dashboard, as well as view your [events](https://dashboard.lob.com/#/events).
      See our [Webhooks Integration Guide](https://lob.com/guides#webhooks_block) for more
      details on how to integrate. Please see the full list of event types available for
      subscription here.

  - name: Zip Lookups
    description: >
      Find a list of cities, states and associated information about a US ZIP code.

x-tagGroups:
  - name: Overview
    tags:
      - Test and Live Environments
      - Asset URLs
      - Certificates
      - API Keys
      - Webhooks
      - Cancellation Windows
      - Libraries
      - Beta Program
      - Request Bodies
      - Rate Limiting
      - Versioning
      - Idempotent Requests
      - Scheduled Mailings

  - name: Print and Mail API
    tags:
      - Postcards
      - Self Mailers
      - Letters
      - Checks
      - Bank Accounts
      - Templates
      - Template Versions

  - name: Address Book
    tags:
      - Addresses
      - NCOA
      - NCOA Live Environment
      - NCOA Test Environment

  - name: US Verification API
    tags:
      - US Verifications
      - US Verifications Test Environment
      - Bulk US Verifications
      - US Autocompletions
      - US Autocompletions Test Environment
      - Zip Lookups

  - name: Intl Verification API
    tags:
      - Intl Verifications
      - Bulk Intl Verifications
      - Intl Verifications Test Environment

components:
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic

security:
  - basicAuth: []

paths:
  /addresses/{adr_id}:
    $ref: resources/addresses/address.yml

  /addresses:
    $ref: resources/addresses/addresses.yml

  /bank_accounts/{bank_id}/verify:
    $ref: resources/bank_accounts/bank_account_verify.yml

  /bank_accounts/{bank_id}:
    $ref: resources/bank_accounts/bank_account.yml

  /bank_accounts:
    $ref: resources/bank_accounts/bank_accounts.yml

  /bulk/us_verifications:
    $ref: resources/bulk_us_verifications/bulk_us_verifications.yml

  /bulk/intl_verifications:
    $ref: resources/bulk_intl_verifications/bulk_intl_verifications.yml

  /certificates/{id}:
    $ref: resources/certificates/certificate.yml

  /certificates:
    $ref: resources/certificates/certificates.yml

  /checks/{chk_id}:
    $ref: resources/checks/check.yml

  /checks:
    $ref: resources/checks/checks.yml

  /intl_verifications:
    $ref: resources/intl_verifications/intl_verifications.yml

  /letters/{ltr_id}:
    $ref: resources/letters/letter.yml

  /letters:
    $ref: resources/letters/letters.yml

  /postcards/{psc_id}:
    $ref: resources/postcards/postcard.yml

  /postcards:
    $ref: resources/postcards/postcards.yml

  /self_mailers/{sfm_id}:
    $ref: resources/self_mailers/self_mailer.yml

  /self_mailers:
    $ref: resources/self_mailers/self_mailers.yml

  /templates/{tmpl_id}/versions/{vrsn_id}:
    $ref: resources/templates/template_versions/template_version.yml

  /templates/{tmpl_id}/versions:
    $ref: resources/templates/template_versions/template_versions.yml

  /templates/{tmpl_id}/compile:
    $ref: resources/templates/template_compile.yml

  /templates/{tmpl_id}:
    $ref: resources/templates/template.yml

  /templates:
    $ref: resources/templates/templates.yml

  /us_autocompletions:
    $ref: resources/us_autocompletions/us_autocompletions.yml

  /us_verifications:
    $ref: resources/us_verifications/us_verifications.yml

  /us_zip_lookups:
    $ref: resources/zip_lookups/zip_lookups.yml
