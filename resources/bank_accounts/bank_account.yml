parameters:
  - in: path
    name: bank_id
    description: id of the bank account
    required: true
    schema:
      $ref: "../../shared/attributes/model_ids/bank/bank_id.yml"

get:
  operationId: bank_account_retrieve

  summary: Retrieve

  description: >-
    Retrieves the details of an existing bank account. You need only supply
    the unique bank account identifier that was returned upon bank account creation.

  tags:
    - Bank Accounts

  responses:
    "200":
      description: Returns a bank account object
      content:
        $ref: responses/bank_account.yml

    default:
      $ref: responses/bank_account_error.yml

  x-codeSamples:
    - lang: Shell
      source: |
        curl https://api.lob.com/v1/bank_accounts/bank_8cad8df5354d33f \
          -u test_0dc8d51e0acffcb1880e0f19c79b2f5b0cc:
      label: CURL
    - lang: Typescript
      source: |
        try {
          const bankAccount = await new BankAccountsApi(config).get('bank_xxxx');
        } catch (err: any) {
          console.error(err);
        }
      label: TYPESCRIPT
    - lang: Javascript
      source: |
        Lob.bankAccounts.retrieve('bank_8cad8df5354d33f', function (err, res) {
          console.log(err, res);
        });
      label: NODE
    - lang: Ruby
      source: |
        bankAccountApi = BankAccountsApi.new(config)

        begin
          retrievedBankAccount = bankAccountApi.get("bank_8cad8df5354d33f")
        rescue => err
          p err.message
        end
      label: RUBY
    - lang: Python
      source: |
        with ApiClient(configuration) as api_client:
          api = BankAccountsApi(api_client)

        try:
          bank_account = api.get("bank_8cad8df5354d33f")
        except ApiException as e:
          print(e)
      label: PYTHON
    - lang: PHP
      source: |
        $apiInstance = new OpenAPI\Client\Api\BankAccountsApi($config, new GuzzleHttp\Client());

        try {
            $result = $apiInstance->get("bank_8cad8df5354d33f");
        } catch (Exception $e) {
            echo $e->getMessage(), PHP_EOL;
        }
    - lang: Java
      source: |
        BankAccountsApi apiInstance = new BankAccountsApi(config);

        try {
          BankAccount response = apiInstance.get("bank_8cad8df5354d33f");
        } catch (ApiException e) {
          e.printStackTrace();
        }
      label: JAVA
    - lang: Elixir
      source: |
        Lob.BankAccount.find("bank_8cad8df5354d33f")
      label: ELIXIR
    - lang: CSharp
      source: |
        BankAccountsApi api = new BankAccountsApi(config);

        try {
          BankAccount response = api.get("bank_8cad8df5354d33f");
        } catch (ApiException e) {
          Console.WriteLine(e.ToString());
        }
      label: CSHARP
    - lang: Go
      source: |
        var context = context.Background()
        context = context.WithValue(suite.ctx, lob.ContextBasicAuth, lob.BasicAuth{UserName: os.Getenv("<YOUR_API_KEY>")})

        var apiClient = *lob.NewAPIClient(configuration)

        fetchedBankAccount, _, err := apiClient.BankAccountsApi.Get(context,"bank_8cad8df5354d33f").Execute()

        if err != nil {
            return err
        }
      label: GO

delete:
  operationId: bank_account_delete

  summary: Delete

  description: Permanently deletes a bank account. It cannot be undone.

  tags:
    - Bank Accounts

  responses:
    "200":
      $ref: ../../shared/responses/bank_account_deleted.yml

    default:
      $ref: responses/bank_account_error.yml

  x-codeSamples:
    - lang: Shell
      source: |
        curl -X DELETE https://api.lob.com/v1/bank_accounts/bank_3e64d9904356b20 \
          -u test_0dc8d51e0acffcb1880e0f19c79b2f5b0cc:
      label: CURL
    - lang: Typescript
      source: |
        try {
          const deleteBankAccount = await new BankAccountsApi(config).delete('bank_xxxx');
        } catch (err: any) {
          console.error(err);
        }
      label: TYPESCRIPT
    - lang: Javascript
      source: |
        Lob.bankAccounts.delete('bank_3e64d9904356b20', function (err, res) {
          console.log(err, res);
        });
      label: NODE
    - lang: Ruby
      source: |
        bankAccountApi = BankAccountsApi.new(config)

        begin
          deletedBankAccount = bankAccountApi.delete("bank_3e64d9904356b20")
        rescue => err
          p err.message
        end
      label: RUBY
    - lang: Python
      source: |
        with ApiClient(configuration) as api_client:
          api = BankAccountsApi(api_client)

        try:
          deleted_resource = api.delete("bank_3e64d9904356b20")
        except ApiException as e:
          print(e)
      label: PYTHON
    - lang: PHP
      source: |
        $apiInstance = new OpenAPI\Client\Api\BankAccountsApi($config, new GuzzleHttp\Client());

        try {
            $result = $apiInstance->delete("bank_3e64d9904356b20");
        } catch (Exception $e) {
            echo $e->getMessage(), PHP_EOL;
        }
    - lang: Java
      source: |
        BankAccountsApi apiInstance = new BankAccountsApi(config);

        try {
            BankAccountDeletion response = apiInstance.delete("bank_3e64d9904356b20");
        } catch (ApiException e) {
            e.printStackTrace();
        }
      label: JAVA
    - lang: Elixir
      source: |
        Lob.BankAccount.destroy("bank_3e64d9904356b20")
      label: ELIXIR
    - lang: CSharp
      source: |
        BankAccountsApi api = new BankAccountsApi(config);

        try {
          BankAccountDeletion response = api.delete("bank_3e64d9904356b20");
        } catch (ApiException e) {
          Console.WriteLine(e.ToString());
        }
      label: CSHARP
    - lang: Go
      source: |
        var context = context.Background()
        context = context.WithValue(suite.ctx, lob.ContextBasicAuth, lob.BasicAuth{UserName: os.Getenv("<YOUR_API_KEY>")})

        var apiClient = *lob.NewAPIClient(configuration)

        deletedBankAccount, _, err := apiClient.BankAccountsApi.Delete(context, "bank_3e64d9904356b20").Execute()

        if err != nil {
            return err
        }
      label: GO
