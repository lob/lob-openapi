get:
  operationId: bank_accounts_list

  summary: List

  description: >-
    Returns a list of your bank accounts. The bank accounts are returned sorted by
    creation date, with the most recently created bank accounts appearing first.

  tags:
    - Bank Accounts

  parameters:
    - $ref: "../../shared/parameters/limit.yml"
    - $ref: "../../shared/parameters/before_after.yml"
    - $ref: "../../shared/parameters/include.yml"
    - $ref: "../../shared/parameters/date_created.yml"
    - $ref: "../../shared/parameters/metadata.yml"

  responses:
    "200":
      $ref: responses/all_bank_accounts.yml

    default:
      $ref: responses/bank_account_error.yml

  x-codeSamples:
    - lang: Shell
      source: |
        curl -X GET "https://api.lob.com/v1/bank_accounts?limit=2" \
          -u test_0dc8d51e0acffcb1880e0f19c79b2f5b0cc:
      label: CURL
    - lang: Typescript
      source: |
        try {
          const bankaccounts = await new BankaccountsApi(config).list(2);
        } catch (err: any) {
          console.error(err);
        }
      label: TYPESCRIPT
    - lang: Javascript
      source: |
        Lob.bankAccounts.list({limit: 2}, function (err, res) {
          console.log(err, res);
        });
      label: NODE
    - lang: Ruby
      source: |
        @lob.bank_accounts.list(limit: 2)
      label: RUBY
    - lang: Python
      source: |
        with ApiClient(configuration) as api_client:
          api = BankAccountsApi(api_client)

        try:
          bank_accounts = api.list(limit=2)
        except ApiException as e:
          print(e)
      label: PYTHON
    - lang: PHP
      source: |
        $apiInstance = new OpenAPI\Client\Api\BankAccountsApi($config, new GuzzleHttp\Client());

        try {
            $result = $apiInstance->list(
              2, // limit
            );
        } catch (Exception $e) {
            echo $e->getMessage(), PHP_EOL;
        }
    - lang: Java
      source: |
        BankAccountsApi apiInstance = new BankAccountsApi(config);

        try {
          BankAccountList response = apiInstance.list(
            2, // limit
            null, // before
            null, // after
            null, // include
            null, // dateCreated
            null // metadata
          );
        } catch (ApiException e) {
          e.printStackTrace();
        }
      label: JAVA
    - lang: Elixir
      source: |
        Lob.BankAccount.list(%{limit: 2})
      label: ELIXIR
    - lang: CSharp
      source: |
        BankAccountsApi api = new BankAccountsApi(config);

        List<string> includeList = new List<string>();
        includeList.Add("total_count");
        Dictionary<String, String> metadata = new Dictionary<String, String>();
        metadata.Add("name", "Harry");
        Dictionary<String, DateTime> dateCreated = new Dictionary<String, DateTime>();
        DateTime dateCreatedDate = DateTime.Today.AddMonths(-1);
        dateCreated.Add("lt", dateCreatedDate);

        try {
          BankAccountList response = api.list(
            2, // limit
            null, // before
            null, // after
            includeList, // include
            dateCreated, // dateCreated
            metadata // metadata
          );
        } catch (ApiException e) {
          Console.WriteLine(e.ToString());
        }
      label: CSHARP

post:
  operationId: bank_account_create

  summary: Create

  description: >-
    Creates a new bank account with the provided properties. Bank accounts
    created in live mode will need to be verified via micro deposits before
    being able to send live checks. The deposits will appear in the bank
    account in 2-3 business days and have the description "VERIFICATION".

  tags:
    - Bank Accounts

  requestBody:
    required: true
    content:
      application/json:
        schema:
          $ref: "models/bank_account_base.yml"
        example:
          description: "Test Bank Account"
          routing_number: "322271627"
          account_number: "123456789"
          signatory: "Jane Doe"
          account_type: "individual"
          metadata:
            spiffy: "true"

      application/x-www-form-urlencoded:
        schema:
          $ref: "models/bank_account_base.yml"
        example:
          description: "Test Bank Account"
          routing_number: "322271627"
          account_number: "123456789"
          signatory: "Jane Doe"
          account_type: "individual"
          metadata:
            spiffy: "true"
        encoding:
          metadata:
            style: deepObject
            explode: true

      multipart/form-data:
        schema:
          $ref: "models/bank_account_base.yml"
        example:
          description: "Test Bank Account"
          routing_number: "322271627"
          account_number: "123456789"
          signatory: "Jane Doe"
          account_type: "individual"
          metadata:
            spiffy: "true"

  responses:
    "200":
      $ref: responses/post_bank_account.yml

    default:
      $ref: responses/bank_account_error.yml

  x-codeSamples:
    - lang: Shell
      source: |
        curl https://api.lob.com/v1/bank_accounts \
          -u test_0dc8d51e0acffcb1880e0f19c79b2f5b0cc: \
          -d "description=Test Bank Account" \
          -d "routing_number=322271627" \
          -d "account_number=123456789" \
          -d "signatory=John Doe" \
          -d "account_type=company"
      label: CURL
    - lang: Typescript
      source: |
        const bankAccountCreate = new BankAccountWritable({
          description: 'Test Bank Account',
          routing_number: '322271627',
          account_number: '123456789',
          signatory: 'Gomez Addams',
          account_type: BankTypeEnum.Individual
        });

        try {
          const myBankAcount = await new BankAccountsApi(config).create(bankAccountCreate);
        } catch (err: any) {
          console.error(err);
        }
      label: TYPESCRIPT
    - lang: Javascript
      source: |
        Lob.bankAccounts.create({
          description: 'Test Bank Account',
          routing_number: 322271627,
          account_number: 123456789,
          signatory: 'John Doe',
          account_type: 'company'
        }, function (err, res) {
          console.log(err, res);
        });
      label: NODE
    - lang: Ruby
      source: |
        @lob.bank_accounts.create(
          description: "Test Bank Account",
          routing_number: "322271627",
          account_number: "123456789",
          signatory: "John Doe",
          account_type: "company"
        )
      label: RUBY
    - lang: Python
      source: |
        bank_account_writable = BankAccountWritable(
          description = "Test Bank Account",
          routing_number = "322271627",
          account_number = "123456789",
          signatory = "John Doe",
          account_type = BankTypeEnum("company"),
        )

        with ApiClient(configuration) as api_client:
          api = BankAccountsApi(api_client)

        try:
          created_bank_account = api.create(bank_account_writable)
        except ApiException as e:
          print(e)
      label: PYTHON
    - lang: PHP
      source: |
        $apiInstance = new OpenAPI\Client\Api\BankAccountsApi($config, new GuzzleHttp\Client());
        $bank_account_writable = new OpenAPI\Client\Model\BankAccountWritable(
          array(
            "description"     => "Test Bank Account",
            "routing_number"     => "322271627",
            "account_number"     => "123456789",
            "signatory"     => "John Doe",
            "account_type"     => "company",
          )
        );

        try {
            $result = $apiInstance->create($bank_account_writable);
        } catch (Exception $e) {
            echo $e->getMessage(), PHP_EOL;
        }
    - lang: Java
      source: |
        BankAccountsApi apiInstance = new BankAccountsApi(config);

        try {
          BankAccountWritable bankAccountWritable = new BankAccountWritable();
          bankAccountWritable.setDescription("Test Bank Account");
          bankAccountWritable.setRoutingNumber("322271627");
          bankAccountWritable.setAccountNumber("123456789");
          bankAccountWritable.setSignatory("John Doe");
          bankAccountWritable.setAccountType(BankTypeEnum.COMPANY);

          BankAccount result = apiInstance.create(bankAccountWritable);
        } catch (ApiException e) {
          e.printStackTrace();
        }
      label: JAVA
    - lang: Elixir
      source: |
        Lob.BankAccount.create(%{
          description: "Test Bank Account",
          routing_number: "322271627",
          account_number: "123456789",
          signatory: "John Doe",
          account_type: "company"
        })
      label: ELIXIR
    - lang: CSharp
      source: |
        BankAccountsApi api = new BankAccountsApi(config);

        BankAccountWritable bankAccountWritable = new BankAccountWritable(
          "Test Bank Account",  // description
          "322271627",  // routingNumber
          "123456789",  // accountNumber
          BankTypeEnum.Company,  // accountType
          "John Doe" // signatory
        );

        try {
          BankAccount result = api.create(bankAccountWritable);
        } catch (ApiException e) {
          Console.WriteLine(e.ToString());
        }
      label: CSHARP
