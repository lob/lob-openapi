parameters:
  - in: path
    name: card_id
    description: id of the card
    required: true
    schema:
      $ref: "../../shared/attributes/model_ids/card_id.yml"

get:
  operationId: card_retrieve

  summary: Retrieve

  description: >-
    Retrieves the details of an existing card. You need only supply
    the unique customer identifier that was returned upon card creation.

  tags:
    - Cards

  responses:
    "200":
      description: Returns a card object
      content:
        $ref: "responses/card.yml"

    default:
      $ref: "../../shared/responses/mailpiece_error.yml"

  x-codeSamples:
    - lang: Shell
      source: |
        curl https://api.lob.com/v1/cards/card_7a6d73c5c8457fc \
          -u <YOUR API KEY>:
      label: CURL
    - lang: Typescript
      source: |
        try {
          const card = await new CardsApi(config).get('card_xxxx');
        } catch (err: any) {
          console.error(err);
        }
      label: TYPESCRIPT
    - lang: Javascript
      source: |
        Lob.cards.retrieve('card_7a6d73c5c8457fc', function (err, res) {
          console.log(err, res);
        });
      label: NODE
    - lang: Python
      source: |
        with ApiClient(configuration) as api_client:
          api = CardsApi(api_client)

        try:
          card = api.get("card_7a6d73c5c8457fc")
        except ApiException as e:
          print(e)
      label: PYTHON
    - lang: PHP
      source: |
        $lob->cards()->get('card_7a6d73c5c8457fc');
      label: PHP
    - lang: CSharp
      source: |
        CardsApi api = new CardsApi(config);

        try {
          Card response = api.get("card_7a6d73c5c8457fc");
        } catch (ApiException e) {
          Console.WriteLine(e.ToString());
        }
      label: CSHARP
    - lang: Ruby
      source: |
        cardApi = CardsApi.new(config)

        begin
          retrievedCard = cardApi.get("card_7a6d73c5c8457fc")
        rescue => err
          p err.message
        end
      label: RUBY
    - lang: Go
      source: |
        var context = context.Background()
        context = context.WithValue(suite.ctx, lob.ContextBasicAuth, lob.BasicAuth{UserName: os.Getenv("<YOUR_API_KEY>")})

        var apiClient = *lob.NewAPIClient(configuration)

        fetchedCard, _, err := apiClient.CardsApi.Get(context,"card_7a6d73c5c8457fc").Execute()

        if err != nil {
            return err
        }
      label: GO

post:
  operationId: card_update

  summary: Update

  description: >-
    Update the details of an existing card. You need only supply
    the unique identifier that was returned upon card creation.

  tags:
    - Cards

  requestBody:
    required: true
    content:
      application/json:
        schema:
          $ref: "models/card_updatable.yml"
        example:
          description: Test card
          auto_reorder: true

      application/x-www-form-urlencoded:
        schema:
          $ref: "models/card_updatable.yml"
        example:
          description: Test card
          auto_reorder: true

      multipart/form-data:
        schema:
          $ref: "models/card_updatable.yml"
        example:
          description: Test card
          auto_reorder: true

  responses:
    "200":
      description: Returns a card object
      content:
        $ref: "responses/card.yml"

    default:
      $ref: "../../shared/responses/mailpiece_error.yml"

  x-codeSamples:
    - lang: Shell
      source: |
        curl -X POST https://api.lob.com/v1/cards/card_7a6d73c5c8457fc \
          -u <YOUR API KEY>: \
          -d "description=Awesome card" \
          -d "auto_reorder=true"
      label: CURL
    - lang: Typescript
      source: |
        const cardUpdatable =  new CardEditable ({
          description: 'Awesome card',
          auto_reorder: true
        });

        try {
          await new CardsApi(config).update(cardUpdatable);
        } catch (err: any) {
          console.error(err);
        }
      label: TYPESCRIPT
    - lang: Javascript
      source: |
        Lob.cards.update('card_7a6d73c5c8457fc', {
          description: 'Awesome card',
          auto_reorder: true
        }, function (err, res) {
          console.log(err, res);
        });
      label: NODE
    - lang: CSharp
      source: |
        CardsApi api = new CardsApi(config);
        CardUpdatable update = new CardUpdatable("Awesome card", true, 15000);

        try {
          api.update("card_6afffd19045076c", update);
        } catch (ApiException e) {
          Console.WriteLine(e.ToString());
        }
      label: CSHARP
    - lang: Python
      source: |
        card_updatable = CardUpdatable(
          description = "Awesome card",
          auto_reorder = True,
          reorder_quantity = 10000,
        )

        with ApiClient(configuration) as api_client:
          api = CardsApi(api_client)

        try:
          updated_card = api.update("card_6afffd19045076c", card_updatable)
        except ApiException as e:
          print(e)
      label: PYTHON
    - lang: Ruby
      source: |
        cardUpdatable = CardUpdatable.new({
          description: "Awesome card",
          auto_reorder: "true",
          reorder_quantity: 10000,
        })

        cardApi = CardsApi.new(config)

        begin
          updatedCard = cardApi.update("card_6afffd19045076c", cardUpdatable)
        rescue => err
          p err.message
        end
      label: RUBY
    - lang: Go
      source: |
        var context = context.Background()
        context = context.WithValue(suite.ctx, lob.ContextBasicAuth, lob.BasicAuth{UserName: os.Getenv("<YOUR_API_KEY>")})

        var apiClient = *lob.NewAPIClient(configuration)

        cardEditable = *lob.NewCardEditable("https://s3-us-west-2.amazonaws.com/public.lob.com/assets/card_horizontal.pdf()")
        createdCard, _, _ := apiClient.CardsApi.Create(context).CardEditable(suite.cardEditable).Execute()
        var updatedCard = *lob.NewCardUpdatable()
        updatedCard.SetDescription("Card was updated")

        resp, _, err := suite.apiClient.CardsApi.Update(context, createdCard.Id).CardUpdatable(updatedCard).Execute()

        if err != nil {
            return err
        }
      label: GO

delete:
  operationId: card_delete

  summary: Delete

  description: >-
    Delete an existing card. You need only supply
    the unique identifier that was returned upon card creation.

  tags:
    - Cards

  responses:
    "200":
      $ref: "../../shared/responses/card_deleted.yml"

    default:
      $ref: "../../shared/responses/mailpiece_error.yml"

  x-codeSamples:
    - lang: Shell
      source: |
        curl -X DELETE https://api.lob.com/v1/cards/card_7a6d73c5c8457fc \
          -u <YOUR API KEY>:
      label: CURL
    - lang: Typescript
      source: |
        try {
          const deleteCard = await new CardsApi(config).delete('card_xxxx');
        } catch (err: any) {
          console.error(err);
        }
      label: TYPESCRIPT
    - lang: Javascript
      source: |
        Lob.cards.delete('card_7a6d73c5c8457fc', function (err, res) {
          console.log(err, res);
        });
      label: NODE
    - lang: Python
      source: |
        with ApiClient(configuration) as api_client:
          api = CardsApi(api_client)

        try:
          deleted_resource = api.delete("card_6afffd19045076c")
        except ApiException as e:
          print(e)
      label: PYTHON
    - lang: PHP
      source: |
        $lob->cards()->delete('card_7a6d73c5c8457fc');
      label: PHP
    - lang: CSharp
      source: |
        CardsApi api = new CardsApi(config);

        try {
          CardDeletion response = api.delete("card_6afffd19045076c");
        } catch (ApiException e) {
          Console.WriteLine(e.ToString());
        }
      label: CSHARP
    - lang: Ruby
      source: |
        cardApi = CardsApi.new(config)

        begin
          deletedCard = cardApi.delete("card_6afffd19045076c")
        rescue => err
          p err.message
        end
      label: RUBY
    - lang: Go
      source: |
        var context = context.Background()
        context = context.WithValue(suite.ctx, lob.ContextBasicAuth, lob.BasicAuth{UserName: os.Getenv("<YOUR_API_KEY>")})

        var apiClient = *lob.NewAPIClient(configuration)

        deletedCard, _, err := apiClient.CardsApi.Delete(context, "card_6afffd19045076c").Execute()

        if err != nil {
            return err
        }
      label: GO
