get:
  operationId: checks_list

  summary: List

  description: >-
    Returns a list of your checks. The checks are returned sorted by
    creation date, with the most recently created checks appearing first.

  tags:
    - Checks

  parameters:
    - $ref: "../../shared/parameters/limit.yml"
    - $ref: "../../shared/parameters/before_after.yml"
    - $ref: "../../shared/parameters/include.yml"
    - $ref: "../../shared/parameters/date_created.yml"
    - $ref: "../../shared/parameters/metadata.yml"
    - $ref: "../../shared/parameters/scheduled.yml"
    - $ref: "../../shared/parameters/send_date.yml"
    - $ref: "../../shared/parameters/mail_type.yml"
    - $ref: "../../shared/parameters/sort_by.yml"

  responses:
    "200":
      $ref: responses/all_checks.yml

    default:
      $ref: "../../shared/responses/mailpiece_error.yml"

  x-codeSamples:
    - lang: Shell
      source: |
        curl -X GET "https://api.lob.com/v1/checks?limit=2" \
          -u test_0dc8d51e0acffcb1880e0f19c79b2f5b0cc:
      label: CURL
    - lang: typescript
      source: |
        try {
          const checks = await new ChecksApi(config).list(2);
        } catch (err: any) {
          console.error(err);
        }
      label: TYPESCRIPT
    - lang: Javascript
      source: |
        Lob.checks.list({limit: 2}, function (err, res) {
          console.log(err, res);
        });
      label: NODE
    - lang: Ruby
      source: |
        checksApi = ChecksApi.new(config)

        begin
          checks = checksApi.list({ limit: 2 })
        rescue => err
          p err.message
        end
      label: RUBY
    - lang: Python
      source: |
        with ApiClient(configuration) as api_client:
          api = ChecksApi(api_client)

        try:
          checks = api.list(limit=2)
        except ApiException as e:
          print(e)
      label: PYTHON
    - lang: PHP
      source: |
        $apiInstance = new OpenAPI\Client\Api\ChecksApi($config, new GuzzleHttp\Client());

        try {
            $result = $apiInstance->list(
              2, // limit
            );
        } catch (Exception $e) {
            echo $e->getMessage(), PHP_EOL;
        }
    - lang: Java
      source: |
        ChecksApi apiInstance = new ChecksApi(config);

        try {
          CheckList response = apiInstance.list(
            2, // limit
            null, // before
            null, // after
            null, // include
            null, // dateCreated
            null, // metadata
            null, // scheduled
            null, // sendDate
            null, // mailType
            null // sortBy
          );
        } catch (ApiException e) {
          e.printStackTrace();
        }
      label: JAVA
    - lang: Elixir
      source: |
        Lob.Check.list(%{limit: 2})
      label: ELIXIR
    - lang: CSharp
      source: |
        ChecksApi api = new ChecksApi(config);

        List<string> includeList = new List<string>();
        includeList.Add("total_count");
        Dictionary<String, String> metadata = new Dictionary<String, String>();
        metadata.Add("name", "Harry");
        Dictionary<String, DateTime> dateCreated = new Dictionary<String, DateTime>();
        DateTime dateCreatedDate = DateTime.Today.AddMonths(-1);
        dateCreated.Add("lt", dateCreatedDate);
        Dictionary<String, String> sendDate = new Dictionary<String, String>();
        sendDate.Add("lt", DateTime.Now.ToString("yyyy-MM-ddTHH\\:mm\\:ss.fffffffzzz"));
        SortBy3 sortBy = new SortBy3(SortBy3.DateCreatedEnum.Asc);

        try {
          CheckList response = api.list(
            2, // limit
            null, // before
            null, // after
            includeList, // include
            dateCreated, // dateCreated
            metadata, // metadata
            true, // scheduled
            sendDate, // sendDate
            MailType.FirstClass, // mailType
            sortBy // sortBy
          );
        } catch (ApiException e) {
          Console.WriteLine(e.ToString());
        }
      label: CSHARP

post:
  operationId: check_create

  summary: Create

  description: >-
    Creates a new check with the provided properties.

  tags:
    - Checks

  parameters:
    - $ref: "../../shared/parameters/idempotency.yml#/idem-header"
    - $ref: "../../shared/parameters/idempotency.yml#/idem-query"

  requestBody:
    required: true
    content:
      application/json:
        schema:
          $ref: "models/check_editable.yml"
        example:
          description: Demo Check
          to:
            description: "Harry - Office"
            name: "Harry Zhang"
            company: "Lob"
            email: "harry@lob.com"
            phone: "5555555555"
            address_line1: "210 King St"
            address_line2: "# 6100"
            address_city: "San Francisco"
            address_state: "CA"
            address_zip: "94107"
            address_country: "US"
          from:
            name: Leore Avidar
            address_line1: 210 King St
            address_line2: "# 6100"
            address_city: San Francisco
            address_state: CA
            address_zip: "94107-1741"
          bank_account: bank_8cad8df5354d33f
          amount: 22.50
          memo: rent
          logo: "https://s3-us-west-2.amazonaws.com/public.lob.com/assets/check_logo.png"
          check_bottom: tmpl_23668b406d5afef
          merge_variables:
            name: Harry
          metadata:
            memo: rafting trip
          attachment: "./cool.pdf"
          send_date: "2017-11-01T00:00:00.000Z"
          use_type: operational
          mail_type: usps_first_class
          check_number: 10001

      application/x-www-form-urlencoded:
        schema:
          $ref: "models/check_editable.yml"
        example:
          description: Demo Check
          to:
            description: "Harry - Office"
            name: "Harry Zhang"
            company: "Lob"
            email: "harry@lob.com"
            phone: "5555555555"
            address_line1: "210 King St"
            address_line2: "# 6100"
            address_city: "San Francisco"
            address_state: "CA"
            address_zip: "94107"
            address_country: "US"
          from:
            name: Leore Avidar
            address_line1: 210 King St
            address_line2: "# 6100"
            address_city: San Francisco
            address_state: CA
            address_zip: "94107-1741"
          bank_account: bank_8cad8df5354d33f
          amount: 22.50
          memo: rent
          logo: "https://s3-us-west-2.amazonaws.com/public.lob.com/assets/check_logo.png"
          check_bottom: tmpl_23668b406d5afef
          merge_variables:
            name: Harry
          metadata:
            memo: rafting trip
          attachment: "./cool.pdf"
          send_date: "2017-11-01T00:00:00.000Z"
          mail_type: usps_first_class
          check_number: 10001
        encoding:
          to:
            style: deepObject
            explode: true
          from:
            style: deepObject
            explode: true
          merge_variables:
            style: deepObject
            explode: true
          metadata:
            style: deepObject
            explode: true

      multipart/form-data:
        schema:
          $ref: "models/check_editable.yml"
        example:
          description: Demo Check
          to:
            description: "Harry - Office"
            name: "Harry Zhang"
            company: "Lob"
            email: "harry@lob.com"
            phone: "5555555555"
            address_line1: "210 King St"
            address_line2: "# 6100"
            address_city: "San Francisco"
            address_state: "CA"
            address_zip: "94107"
            address_country: "US"
          from:
            name: Leore Avidar
            address_line1: 210 King St
            address_line2: "# 6100"
            address_city: San Francisco
            address_state: CA
            address_zip: "94107-1741"
          bank_account: bank_8cad8df5354d33f
          amount: 22.50
          memo: rent
          logo: "https://s3-us-west-2.amazonaws.com/public.lob.com/assets/check_logo.png"
          check_bottom: tmpl_23668b406d5afef
          merge_variables:
            name: Harry
          metadata:
            memo: rafting trip
          attachment: "./cool.pdf"
          send_date: "2017-11-01T00:00:00.000Z"
          use_type: operational
          mail_type: usps_first_class
          check_number: 10001
        encoding:
          logo:
            contentType: image/png, image/jpeg

  responses:
    "200":
      $ref: responses/post_check.yml

    default:
      $ref: "../../shared/responses/mailpiece_error.yml"

  x-codeSamples:
    - lang: Shell
      source: |
        curl https://api.lob.com/v1/checks \
          -u test_0dc8d51e0acffcb1880e0f19c79b2f5b0cc: \
          -d 'description=Demo Check' \
          -d 'to[name]=Harry Zhang' \
          -d 'to[address_line1]=210 King St' \
          -d 'to[address_line2]=# 6100' \
          -d 'to[address_city]=San Francisco' \
          -d 'to[address_state]=CA' \
          -d 'to[address_zip]=94107' \
          -d 'from=adr_210a8d4b0b76d77b' \
          -d 'bank_account=bank_8cad8df5354d33f' \
          -d 'amount=22.50' \
          -d 'use_type=operational' \
          -d 'memo=rent' \
          --data-urlencode 'logo=https://s3-us-west-2.amazonaws.com/public.lob.com/assets/check_logo.png' \
          --data-urlencode 'check_bottom=<h1 style="padding-top:4in;">Demo Check for {{name}}</h1>' \
          -d 'merge_variables[name]=Harry'
      label: CURL
    - lang: Typescript
      source: |
        const checkCreate = new CheckEditable({
        to: new AddressEditable({
          name: 'Harry Zhang',
          address_line1: '210 King St',
          address_line2: '# 6100',
          address_city: 'San Francisco',
          address_state: 'CA',
          address_zip: '94107',
        }),
        from: 'adr_xxxx',
        bank_account: 'bank_xxxx',
        amount: 100,
        use_type: 'operational'
        });

        try {
          const myCheck = await new ChecksApi(config).create(checkCreate);
        } catch (err: any) {
          console.error(err);
        }
      label: TYPESCRIPT
    - lang: Javascript
      source: |
        Lob.checks.create({
          description: 'Demo Check',
          bank_account: 'bank_8cad8df5354d33f',
          to: {
            name: 'Harry Zhang',
            address_line1: '210 King St',
            address_line2: '# 6100',
            address_city: 'San Francisco',
            address_state: 'CA',
            address_zip: '94107'
          },
          from: 'adr_210a8d4b0b76d77b',
          amount: 22.50,
          use_type: 'operational', 
          memo: 'rent',
          logo: 'https://s3-us-west-2.amazonaws.com/public.lob.com/assets/check_logo.png',
          check_bottom: '<h1 style="padding-top:4in;">Demo Check for {{name}}</h1>',
          merge_variables: {
            name: 'Harry'
          }
        }, function (err, res) {
          console.log(err, res);
        });
      label: NODE
    - lang: Ruby
      source: |
        checkCreate = CheckEditable.new({
          description: "Demo Check",
          bank_account: "bank_8cad8df5354d33f",
          amount: 22.5,
          memo: "rent",
          logo: "https://s3-us-west-2.amazonaws.com/public.lob.com/assets/check_logo.png",
          check_bottom: "<h1 style='padding-top:4in;'>Demo Check for {{name}}</h1>",
          from: "adr_210a8d4b0b76d77b",
          to: AddressDomestic.new({
            name: "Harry Zhang",
            address_line1: "210 King St",
            address_line2: "# 6100",
            address_city: "San Francisco",
            address_state: "CA",
            address_zip: "94107",
          }),
          merge_variables: {
            name: "Harry"
          },
          use_type: "operational"
        });

        checkApi = ChecksApi.new(config)

        begin
          createdCheck = checkApi.create(checkCreate)
        rescue => err
          p err.message
        end
      label: RUBY
    - lang: Python
      source: |
        check_editable = CheckEditable(
          description = "Demo Check",
          bank_account = "bank_8cad8df5354d33f",
          amount = 22.5,
          memo = "rent",
          logo = "https://s3-us-west-2.amazonaws.com/public.lob.com/assets/check_logo.png",
          check_bottom = "<h1 style='padding-top:4in;'>Demo Check for {{name}}</h1>",
          _from = "adr_210a8d4b0b76d77b",
          to = AddressDomestic(
            name = "Harry Zhang",
            address_line1 = "210 King St",
            address_line2 = "# 6100",
            address_city = "San Francisco",
            address_state = "CA",
            address_zip = "94107",
          ),
          merge_variables = MergeVariables(
            name = "Harry",
          ),
          use_type = "operational"
        )

        with ApiClient(configuration) as api_client:
          api = ChecksApi(api_client)

        try:
          created_check = api.create(check_editable)
        except ApiException as e:
          print(e)
      label: PYTHON
    - lang: PHP
      source: |
        $to = new OpenAPI\Client\Model\AddressEditable(
          array(
            "name"     => "Harry Zhang",
            "address_line1"     => "210 King St",
            "address_line2"     => "# 6100",
            "address_city"     => "San Francisco",
            "address_state"     => "CA",
            "address_zip"     => "94107",
          )
        );

        $merge_variables = new stdClass;
        $merge_variables->name = "Harry";

        $use_type = "operational";

        $apiInstance = new OpenAPI\Client\Api\ChecksApi($config, new GuzzleHttp\Client());
        $check_editable = new OpenAPI\Client\Model\CheckEditable(
          array(
            "description"     => "Demo Check",
            "bank_account"     => "bank_8cad8df5354d33f",
            "amount"     => "22.5",
            "memo"     => "rent",
            "logo"     => "https://s3-us-west-2.amazonaws.com/public.lob.com/assets/check_logo.png",
            "check_bottom"     => "<h1 style='padding-top:4in;'>Demo Check for {{name}}</h1>",
            "from"     => "adr_210a8d4b0b76d77b",
            "to"     => $to,
            "merge_variables"     => $merge_variables,
            "use_type" => $use_type
          )
        );

        try {
            $result = $apiInstance->create($check_editable);
        } catch (Exception $e) {
            echo $e->getMessage(), PHP_EOL;
        }
    - lang: Java
      source: |
        Map<String, String> merge_variables = new HashMap<String, String>();
        merge_variables.put("name", "Harry");

        ChecksApi apiInstance = new ChecksApi(config);

        AddressEditable to = new AddressEditable();
        to.setName("Harry Zhang");
        to.setAddressLine1("210 King St");
        to.setAddressLine2("# 6100");
        to.setAddressCity("San Francisco");
        to.setAddressState("CA");
        to.setAddressZip("94107");

        try {
          CheckEditable checkEditable = new CheckEditable();
          checkEditable.setDescription("Demo Check");
          checkEditable.setBankAccount("bank_8cad8df5354d33f");
          checkEditable.setAmount(22.5f);
          checkEditable.setMemo("rent");
          checkEditable.setLogo("https://s3-us-west-2.amazonaws.com/public.lob.com/assets/check_logo.png");
          checkEditable.setCheckBottom("<h1 style='padding-top:4in;'>Demo Check for {{name}}</h1>");
          checkEditable.setFrom("adr_210a8d4b0b76d77b");
          checkEditable.setTo(to);
          checkEditable.setMergeVariables(merge_variables);
          checkEditable.setUseType("operational");

          Check result = apiInstance.create(checkEditable, null);
        } catch (ApiException e) {
          e.printStackTrace();
        }
      label: JAVA
    - lang: Elixir
      source: |
        Lob.Check.create(%{
          description: 'Demo Check',
          bank_account: 'bank_8cad8df5354d33f',
          to: %{
            name: 'Harry Zhang',
            address_line1: '210 King St',
            address_line2: '# 6100',
            address_city: 'San Francisco',
            address_state: 'CA',
            address_zip: '94107'
          },
          from: 'adr_210a8d4b0b76d77b',
          amount: 22.50,
          memo: 'rent',
          logo: 'https://s3-us-west-2.amazonaws.com/public.lob.com/assets/check_logo.png',
          check_bottom: '<h1 style="padding-top:4in;">Demo Check for {{name}}</h1>',
          merge_variables: %{
            name: 'Harry'
          },
          use_type: 'operational'
        })
      label: ELIXIR
    - lang: CSharp
      source: |
        Dictionary<string, string> mergeVariables = new Dictionary<string, string>();
        mergeVariables.Add("name", "Harry");

        ChecksApi api = new ChecksApi(config);

        AddressEditable to = new AddressEditable(
          "210 King St",  // addressLine1
          "# 6100",  // addressLine2
          "San Francisco",  // addressCity
          "CA",  // addressState
          "94107",  // addressZip
          default(CountryExtended),  // addressCounty
          "",  // description
          "Harry Zhang" // name
        );

        CheckEditable checkEditable = new CheckEditable(
          "adr_249af768103d2810",  // from
          to.ToJson(),  // to
          "bank_8cad8df5354d33f",  // bank_account
          22.5f,  // amount
          "https://s3-us-west-2.amazonaws.com/public.lob.com/assets/check_logo.png",  // logo
          "<h1 style='padding-top:4in;'>Demo Check for {{name}}</h1>",  // checkBottom
          default(string),  // attachment
          "Demo Check",  // description
          default(Dictionary<string, string>),  // metadata
          mergeVariables,  // mergeVariables
          default(DateTime),  // sendDate
          CheckEditable.MailTypeEnum.UspsFirstClass,  // mailType
          "rent", // memo
          "operational" // use_type
        );

        try {
          Check result = api.create(checkEditable, null);
        } catch (ApiException e) {
          Console.WriteLine(e.ToString());
        }
      label: CSHARP
