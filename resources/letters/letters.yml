get:
  operationId: letters_list

  summary: List

  description: >-
    Returns a list of your letters. The letters are returned sorted by
    creation date, with the most recently created letters appearing first.

  tags:
    - Letters

  parameters:
    - $ref: "../../shared/parameters/limit.yml"
    - $ref: "../../shared/parameters/before_after.yml"
    - $ref: "../../shared/parameters/include.yml"
    - $ref: "../../shared/parameters/date_created.yml"
    - $ref: "../../shared/parameters/metadata.yml"
    - in: query
      name: color
      description: Set to `true` to return only color letters. Set to `false` to return only black & white letters.
      schema:
        type: boolean

    - $ref: "../../shared/parameters/scheduled.yml"
    - $ref: "../../shared/parameters/send_date.yml"
    - $ref: "../../shared/parameters/mail_type.yml"
    - $ref: "../../shared/parameters/sort_by.yml"

  responses:
    "200":
      $ref: responses/all_letters.yml

    default:
      $ref: "../../shared/responses/mailpiece_error.yml"

  x-codeSamples:
    - lang: Shell
      source: |
        curl -X GET "https://api.lob.com/v1/letters?limit=2" \
          -u test_0dc8d51e0acffcb1880e0f19c79b2f5b0cc:
      label: CURL
    - lang: typescript
      source: |
        try {
          const letters = await new LettersApi(config).list(2);
        } catch (err: any) {
          console.error(err);
        }
      label: TYPESCRIPT
    - lang: Javascript
      source: |
        Lob.letters.list({limit: 2}, function (err, res) {
          console.log(err, res);
        });
      label: NODE
    - lang: Ruby
      source: |
        @lob.letters.list(limit: 2)
      label: RUBY
    - lang: Python
      source: |
        with ApiClient(configuration) as api_client:
          api = LettersApi(api_client)

        try:
          letters = api.list(limit=2)
        except ApiException as e:
          print(e)
      label: PYTHON
    - lang: PHP
      source: |
        $apiInstance = new OpenAPI\Client\Api\LettersApi($config, new GuzzleHttp\Client());

        try {
            $result = $apiInstance->list(
              2, // limit
            );
        } catch (Exception $e) {
            echo $e->getMessage(), PHP_EOL;
        }
    - lang: Java
      source: |
        LettersApi apiInstance = new LettersApi(config);

        try {
          LetterList response = apiInstance.list(
            2, // limit
            null, // before
            null, // after
            null, // include
            null, // dateCreated
            null, // metadata
            null, // color
            null, // scheduled
            null, // sendDate
            null, // mailType
            null // sortBy
          );
        } catch (ApiException e) {
          e.printStackTrace();
        }
      label: JAVA
    - lang: Elixir
      source: |
        Lob.Letter.list(%{limit: 2})
      label: ELIXIR
    - lang: CSharp
      source: |
        LettersApi api = new LettersApi(config);

        List<string> includeList = new List<string>();
        includeList.Add("total_count");
        Dictionary<String, String> metadata = new Dictionary<String, String>();
        metadata.Add("name", "Harry");
        Dictionary<String, DateTime> dateCreated = new Dictionary<String, DateTime>();
        DateTime dateCreatedDate = DateTime.Today.AddMonths(-1);
        dateCreated.Add("lt", dateCreatedDate);
        Dictionary<String, String> sendDate = new Dictionary<String, String>();
        sendDate.Add("lt", DateTime.Now.ToString("yyyy-MM-ddTHH\\:mm\\:ss.fffffffzzz"));
        SortBy3 sortBy = new SortBy3(SortBy3.DateCreatedEnum.Asc);

        try {
          LetterList response = api.list(
            2, // limit
            null, // before
            null, // after
            includeList, // include
            dateCreated, // dateCreated
            metadata, // metadata
            true, // color
            true, // scheduled
            sendDate, // sendDate
            MailType.FirstClass, // mailType
            sortBy // sortBy
          );
        } catch (ApiException e) {
          Console.WriteLine(e.ToString());
        }
      label: CSHARP

post:
  operationId: letter_create

  summary: Create

  description: >-
    Creates a new letter given information

  tags:
    - Letters

  parameters:
    - $ref: "../../shared/parameters/idempotency.yml#/idem-header"
    - $ref: "../../shared/parameters/idempotency.yml#/idem-query"

  requestBody:
    required: true
    content:
      application/json:
        schema:
          $ref: "models/letter_editable.yml"
        example:
          description: demo
          to:
            description: "Harry - Office"
            name: "Harry Zhang"
            company: "Lob"
            email: "harry@lob.com"
            phone: "5555555555"
            address_line1: "210 King St"
            address_line2: "# 6100"
            address_city: "San Francisco"
            address_state: "CA"
            address_zip: "94107"
            address_country: "US"
          from:
            name: Harry
            address_line1: 210 King St
            address_line2: "# 6100"
            address_city: San Francisco
            address_state: CA
            address_zip: "94107"
          file: "<html style='padding-top: 3in; margin: .5in;'>HTML Letter for {{name}}</html>"
          color: true
          cards:
            - "card_c51ae96f5cebf3e"
          double_sided: false
          address_placement: bottom_first_page
          mail_type: usps_first_class
          return_envelope: true
          perforated_page: 1
          merge_variables:
            name: Harry
          metadata:
            spiffy: "true"
          send_date: "2017-11-01T00:00:00.000Z"
          extra_service: registered
          custom_envelope:
          qr_code:
            position: "relative"
            redirect_url: "https://www.lob.com"
            width: "2"
            top: "2"
            right: "2"
            pages: "1-2,4-5"

      application/x-www-form-urlencoded:
        schema:
          $ref: "models/letter_editable.yml"
        example:
          description: demo
          to:
            description: "Harry - Office"
            name: "Harry Zhang"
            company: "Lob"
            email: "harry@lob.com"
            phone: "5555555555"
            address_line1: "210 King St"
            address_line2: "# 6100"
            address_city: "San Francisco"
            address_state: "CA"
            address_zip: "94107"
            address_country: "US"
          from:
            name: Harry
            address_line1: 210 King St
            address_line2: "# 6100"
            address_city: San Francisco
            address_state: CA
            address_zip: "94107"
          file: "<html style='padding-top: 3in; margin: .5in;'>HTML Letter for {{name}}</html>"
          color: true
          cards:
            - "card_c51ae96f5cebf3e"
          double_sided: false
          address_placement: top_first_page
          mail_type: usps_first_class
          return_envelope: true
          perforated_page: 1
          merge_variables:
            name: Harry
          metadata:
            spiffy: "true"
          send_date: "2017-11-01T00:00:00.000Z"
          extra_service: registered
          custom_envelope:
          qr_code:
            position: "relative"
            redirect_url: "https://www.lob.com"
            width: "2"
            bottom: "2"
            right: "2"
            pages: "1,4"
        encoding:
          to:
            style: deepObject
            explode: true
          from:
            style: deepObject
            explode: true
          merge_variables:
            style: deepObject
            explode: true
          metadata:
            style: deepObject
            explode: true

      multipart/form-data:
        schema:
          $ref: "models/letter_editable.yml"
        example:
          description: demo
          to:
            description: "Harry - Office"
            name: "Harry Zhang"
            company: "Lob"
            email: "harry@lob.com"
            phone: "5555555555"
            address_line1: "210 King St"
            address_line2: "# 6100"
            address_city: "San Francisco"
            address_state: "CA"
            address_zip: "94107"
            address_country: "US"
          from:
            name: Harry
            address_line1: 210 King St
            address_line2: "# 6100"
            address_city: San Francisco
            address_state: CA
            address_zip: "94107"
          file: "<html style='padding-top: 3in; margin: .5in;'>HTML Letter for {{name}}</html>"
          color: true
          cards:
            - "card_c51ae96f5cebf3e"
          double_sided: false
          address_placement: top_first_page
          mail_type: usps_first_class
          return_envelope: true
          perforated_page: 1
          merge_variables:
            name: Harry
          metadata:
            spiffy: "true"
          send_date: "2017-11-01T00:00:00.000Z"
          extra_service: registered
          custom_envelope:
          qr_code:
            position: "relative"
            redirect_url: "https://www.lob.com"
            width: "2"
            bottom: "2"
            left: "2"
            pages: "1,3-5"

  responses:
    "200":
      $ref: responses/post_letter.yml

    default:
      $ref: "../../shared/responses/mailpiece_error.yml"

  x-codeSamples:
    - lang: Shell
      source: |
        curl https://api.lob.com/v1/letters \
          -u YOUR_API_KEY \
          -d 'description=Demo Letter' \
          -d 'to[name]=Harry Zhang' \
          -d 'to[address_line1]=210 King St' \
          -d 'to[address_line2]=# 6100' \
          -d 'to[address_city]=San Francisco' \
          -d 'to[address_state]=CA' \
          -d 'to[address_zip]=94107' \
          -d 'from=adr_210a8d4b0b76d77b' \
          --data-urlencode 'file=<html style="padding-top: 3in; margin: .5in;">HTML Letter for {{name}}</html>' \
          -d 'merge_variables[name]=Harry' \
          -d 'color=true' \
          -d 'cards[]=card_c51ae96f5cebf3e' \
          -d 'qr_code[position]=relative' \
          -d 'qr_code[redirect_url]=https://www.lob.com' \
          -d 'qr_code[width]=2' \
          -d 'qr_code[bottom]=2' \
          -d 'qr_code[left]=2' \
          -d 'qr_code[pages]=3,4-5'
      label: CURL
    - lang: Typescript
      source: |
        const letterCreate = new LetterEditable({
          to: {
            name: 'Harry Zhang',
            address_line1: '210 King St',
            address_line2: '# 6100',
            address_city: 'San Francisco',
            address_state: 'CA',
            address_zip: '94107'
          },
          from: 'adr_xxxx',
          color: true,
          extra_service: LetterEditableExtraServiceEnum.Certified,
          file: 'https://s3-us-west-2.amazonaws.com/public.lob.com/assets/us_letter_1pg.pdf',
          qr_code : {
            position: 'relative',
            redirect_url: 'https://www.lob.com',
            width: '2',
            bottom: '2',
            left: '2',
            pages: '2,5'
          }
        });

        try {
          const myLetter = await new LettersApi(config).create(letterCreate);
        } catch (err: any) {
          console.error(err);
        }
      label: TYPESCRIPT
    - lang: Javascript
      source: |
        Lob.letters.create({
          description: 'Demo Letter',
          to: {
            name: 'Harry Zhang',
            address_line1: '210 King St',
            address_line2: '# 6100',
            address_city: 'San Francisco',
            address_state: 'CA',
            address_zip: '94107'
          },
          from: 'adr_210a8d4b0b76d77b',
          file: '<html style="padding-top: 3in; margin: .5in;">HTML Letter for {{name}}</html>',
          merge_variables: {
            name: 'Harry'
          },
          color: true,
          cards: ['card_c51ae96f5cebf3e'],
          qr_code : {
            position: 'relative',
            redirect_url: 'https://www.lob.com',
            width: '2',
            bottom: '2',
            left: '2',
            pages: '2,4-5'
          }
        }, function (err, res) {
          console.log(err, res);
        });
      label: NODE
    - lang: Ruby
      source: |
        @lob.letters.create(
          description: 'Demo Letter',
          to: {
            name: 'Harry Zhang',
            address_line1: '210 King St',
            address_line2: '# 6100',
            address_city: 'San Francisco',
            address_state: 'CA',
            address_zip: '94107'
          },
          from: 'adr_210a8d4b0b76d77b',
          file: '<html style="padding-top: 3in; margin: .5in;">HTML Letter for {{name}}</html>',
          merge_variables: {
            name: 'Harry'
          },
          color: true,
          cards: ['card_c51ae96f5cebf3e'],
          qr_code : {
            position: 'relative',
            redirect_url: 'https://www.lob.com',
            width: '2',
            bottom: '2',
            left: '2',
            pages: '2,4-5'
          }
        )
      label: RUBY
    - lang: Python
      source: |
        letter_editable = LetterEditable(
          description = "Demo Letter",
          _from = "adr_210a8d4b0b76d77b",
          file = "<html style='padding-top: 3in; margin: .5in;'>HTML Letter for {{name}}</html>",
          color = True,
          to = AddressEditable(
            name = "Harry Zhang",
            address_line1 = "210 King St",
            address_line2 = "# 6100",
            address_city = "San Francisco",
            address_state = "CA",
            address_zip = "94107",
          ),
          merge_variables = MergeVariables(
            name = "Harry",
          ),
          cards = [
            "card_c51ae96f5cebf3e",
          ],
          qr_code = {
            'position' : 'relative',
            'redirect_url' : 'https://www.lob.com',
            'width' : '2',
            'bottom' : '2',
            'left' : '2',
            'pages' : '1,3'
          }
        )

        with ApiClient(configuration) as api_client:
          api = LettersApi(api_client)

        try:
          created_letter = api.create(letter_editable)
        except ApiException as e:
          print(e)
      label: PYTHON
    - lang: PHP
      source: |
        $to = new OpenAPI\Client\Model\AddressEditable(
          array(
            "name"     => "Harry Zhang",
            "address_line1"     => "210 King St",
            "address_line2"     => "# 6100",
            "address_city"     => "San Francisco",
            "address_state"     => "CA",
            "address_zip"     => "94107",
          )
        );

        $qr_code = new OpenAPI\Client\Model\QRCode(
          array(
            "position" => "relative",
            "redirect_url" => "https://www.lob.com",
            "width" => "2",
            "bottom" => "2",
            "left" => "2",
            "pages" => "1,3,5",
          )
        );

        $merge_variables = new stdClass;
        $merge_variables->name = "Harry";

        $apiInstance = new OpenAPI\Client\Api\LettersApi($config, new GuzzleHttp\Client());
        $letter_editable = new OpenAPI\Client\Model\LetterEditable(
          array(
            "description"     => "Demo Letter",
            "from"     => "adr_210a8d4b0b76d77b",
            "file"     => "<html style='padding-top: 3in; margin: .5in;'>HTML Letter for {{name}}</html>",
            "color"     => "true",
            "to"     => $to,
            "merge_variables"     => $merge_variables,
            "cards"     => array(
              "card_c51ae96f5cebf3e",
              "card_thingy",
            ),
            "qr_code"   => $qr_code,
          )
        );

        try {
            $result = $apiInstance->create($letter_editable);
        } catch (Exception $e) {
            echo $e->getMessage(), PHP_EOL;
        }
    - lang: Java
      source: |
        Map<String, String> merge_variables = new HashMap<String, String>();
        merge_variables.put("name", "Harry");

        LettersApi apiInstance = new LettersApi(config);

        AddressEditable to = new AddressEditable();
        to.setName("Harry Zhang");
        to.setAddressLine1("210 King St");
        to.setAddressLine2("# 6100");
        to.setAddressCity("San Francisco");
        to.setAddressState("CA");
        to.setAddressZip("94107");

        QRCode qrCode = new QRCode();
        qrCode.setPosition("relative");
        qrCode.setRedirectUrl("https://www.lob.com");
        qrCode.setWidth("2");
        qrCode.setLeft("2");
        qrCode.setBottom("2");
        qrCode.setPages("1,3,5");

        List<String> cards = new ArrayList<String>();
        cards.add("card_c51ae96f5cebf3e");
        cards.add("card_thingy");

        try {
          LetterEditable letterEditable = new LetterEditable();
          letterEditable.setDescription("Demo Letter");
          letterEditable.setFrom("adr_210a8d4b0b76d77b");
          letterEditable.setFile("<html style='padding-top: 3in; margin: .5in;'>HTML Letter for {{name}}</html>");
          letterEditable.setColor(true);
          letterEditable.setTo(to);
          letterEditable.setMergeVariables(merge_variables);
          letterEditable.setCards(cards);
          letterEditable.setQRCode(qrCode);

          Letter result = apiInstance.create(letterEditable, null);
        } catch (ApiException e) {
          e.printStackTrace();
        }
      label: JAVA
    - lang: Elixir
      source: |
        Lob.Letter.create(%{
          description: 'Demo Letter',
          to: %{
            name: 'Harry Zhang',
            address_line1: '210 King St',
            address_line2: '# 6100',
            address_city: 'San Francisco',
            address_state: 'CA',
            address_zip: '94107'
          },
          from: 'adr_210a8d4b0b76d77b',
          file: '<html style="padding-top: 3in; margin: .5in;">HTML Letter for {{name}}</html>',
          merge_variables: %{
            name: 'Harry'
          },
          color: true,
          cards: ['card_c51ae96f5cebf3e'],
          qr_code: %{
            position: 'relative',
            redirect_url: 'https://www.lob.com',
            width: '2',
            bottom: '2',
            left: '2',
            pages: '1-2,5'
          }
        })
      label: ELIXIR
    - lang: CSharp
      source: |
        Dictionary<string, string> mergeVariables = new Dictionary<string, string>();
        mergeVariables.Add("name", "Harry");

        LettersApi api = new LettersApi(config);

        AddressEditable to = new AddressEditable(
          "210 King St",  // addressLine1
          "# 6100",  // addressLine2
          "San Francisco",  // addressCity
          "CA",  // addressState
          "94107",  // addressZip
          default(CountryExtended),  // addressCounty
          null,  // description
          "Harry Zhang" // name
        );

        QRCode qrCode = new QRCode(
          "relative",  //position,
          "https://www.lob.com", //redirect_url
          "2", //width
          "2", //left
          "2", //bottom
          "1-2,5", //pages
        );

        List<String> cards = new List<String>();
        cards.Add("card_c51ae96f5cebf3e");

        LetterEditable letterEditable = new LetterEditable(
          "Demo Letter",  // description
          default(Dictionary<string, string>),  // metadata
          default(MailType),  // mailType
          mergeVariables,  // mergeVariables
          default(DateTime),  // sendDate
          true,  // color
          true,  // doubleSided
          LetterEditable.AddressPlacementEnum.TopFirstPage,  // addressPlacement
          default(Object),  // returnEnvelope
          default(int?),  // perforatedPage
          default(LetterEditableCustomEnvelope),  // customEnvelope
          to.ToJson(),  // to
          "adr_249af768103d2810",  // from
          "<html style='padding-top: 3in; margin: .5in;'>HTML Letter for {{name}}</html>",  // file
          default(LetterEditable.ExtraServiceEnum?),  // extraService
          cards, // cards
          qrCode
        );

        try {
          Letter result = api.create(letterEditable, null);
        } catch (ApiException e) {
          Console.WriteLine(e.ToString());
        }
      label: CSHARP
