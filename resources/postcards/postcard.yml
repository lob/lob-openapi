parameters:
  - in: path
    name: psc_id
    description: id of the postcard
    required: true
    schema:
      $ref: "attributes/psc_id.yml"

get:
  operationId: postcard_retrieve

  summary: Retrieve

  description: >-
    Retrieves the details of an existing postcard. You need only supply
    the unique customer identifier that was returned upon postcard creation.

  tags:
    - Postcards

  responses:
    "200":
      description: Returns a postcard object
      content:
        $ref: "responses/postcard.yml"

    default:
      $ref: "../../shared/responses/mailpiece_error.yml"

  x-codeSamples:
    - lang: Shell
      source: |
        curl https://api.lob.com/v1/postcards/psc_5c002b86ce47537a \
          -u test_0dc8d51e0acffcb1880e0f19c79b2f5b0cc:
      label: CURL
    - lang: Typescript
      source: |
        try {
          const postcard = await new PostCardsApi(config).get('psc_xxxx');
        } catch (err: any) {
          console.error(err);
        }
      label: TYPESCRIPT
    - lang: Javascript
      source: |
        Lob.postcards.retrieve('psc_5c002b86ce47537a', function (err, res) {
          console.log(err, res);
        });
      label: NODE
    - lang: Ruby
      source: |
        letterApi = LettersApi.new(config)

        begin
          retrievedLetter = letterApi.get("ltr_4868c3b754655f90")
        rescue => err
          p err.message
        end
      label: RUBY
    - lang: Python
      source: |
        with ApiClient(configuration) as api_client:
          api = PostcardsApi(api_client)

        try:
          postcard = api.get("psc_5c002b86ce47537a")
        except ApiException as e:
          print(e)
      label: PYTHON
    - lang: PHP
      source: |
        $apiInstance = new OpenAPI\Client\Api\PostcardsApi($config, new GuzzleHttp\Client());

        try {
            $result = $apiInstance->get("psc_5c002b86ce47537a");
        } catch (Exception $e) {
            echo $e->getMessage(), PHP_EOL;
        }
    - lang: Java
      source: |
        PostcardsApi apiInstance = new PostcardsApi(config);

        try {
          Postcard response = apiInstance.get("psc_5c002b86ce47537a");
        } catch (ApiException e) {
          e.printStackTrace();
        }
      label: JAVA
    - lang: Elixir
      source: |
        Lob.Postcard.find("psc_5c002b86ce47537a")
      label: ELIXIR
    - lang: CSharp
      source: |
        PostcardsApi api = new PostcardsApi(config);

        try {
          Postcard response = api.get("psc_5c002b86ce47537a");
        } catch (ApiException e) {
          Console.WriteLine(e.ToString());
        }
      label: CSHARP
    - lang: Go
      source: |
        var context = context.Background()
        context = context.WithValue(suite.ctx, lob.ContextBasicAuth, lob.BasicAuth{UserName: os.Getenv("<YOUR_API_KEY>")})

        var apiClient = *lob.NewAPIClient(configuration)

        fetchedPostcard, _, err := apiClient.PostcardsApi.Get(context,"psc_5c002b86ce47537a").Execute()

        if err != nil {
            return err
        }
      label: GO

delete:
  operationId: postcard_delete

  summary: Cancel

  description: >-
    Completely removes a postcard from production. This can only be done if
    the postcard has a `send_date` and the `send_date` has not yet passed.
    If the postcard is successfully canceled, you will not be charged for it.
    Read more on [cancellation windows](#section/Cancellation-Windows)
    and [scheduling](#section/Scheduled-Mailings). Scheduling and
    cancellation is a premium feature. Upgrade to the appropriate
    <a href="https://dashboard.lob.com/#/settings/editions" target="_blank">Print & Mail Edition</a>
    to gain access.

  tags:
    - Postcards

  responses:
    "200":
      $ref: "../../shared/responses/postcard_deleted.yml"

    default:
      $ref: "../../shared/responses/mailpiece_error.yml"

  x-codeSamples:
    - lang: Shell
      source: |
        curl -X DELETE https://api.lob.com/v1/postcards/psc_5c002b86ce47537a \
          -u test_0dc8d51e0acffcb1880e0f19c79b2f5b0cc:
      label: CURL
    - lang: Typescript
      source: |
        try {
          const deletePostcard = await new PostcardsApi(config).delete('psc_xxxx');
        } catch (err: any) {
          console.error(err);
        }
      label: TYPESCRIPT
    - lang: Javascript
      source: |
        Lob.postcards.delete('psc_5c002b86ce47537a', function (err, res) {
          console.log(err, res);
        });
      label: NODE
    - lang: Ruby
      source: |
        letterApi = LettersApi.new(config)

        begin
          deletedLetter = letterApi.cancel("ltr_4868c3b754655f90")
        rescue => err
          p err.message
        end
      label: RUBY
    - lang: Python
      source: |
        with ApiClient(configuration) as api_client:
          api = PostcardsApi(api_client)

        try:
          deleted_resource = api.cancel("psc_5c002b86ce47537a")
        except ApiException as e:
          print(e)
      label: PYTHON
    - lang: PHP
      source: |
        $apiInstance = new OpenAPI\Client\Api\PostcardsApi($config, new GuzzleHttp\Client());

        try {
            $result = $apiInstance->cancel("psc_5c002b86ce47537a");
        } catch (Exception $e) {
            echo $e->getMessage(), PHP_EOL;
        }
    - lang: Java
      source: |
        PostcardsApi apiInstance = new PostcardsApi(config);

        try {
            PostcardDeletion response = apiInstance.cancel("psc_5c002b86ce47537a");
        } catch (ApiException e) {
            e.printStackTrace();
        }
      label: JAVA
    - lang: Elixir
      source: |
        Lob.Postcard.destroy("psc_5c002b86ce47537a")
      label: ELIXIR
    - lang: CSharp
      source: |
        PostcardsApi api = new PostcardsApi(config);

        try {
          PostcardDeletion response = api.delete("psc_5c002b86ce47537a");
        } catch (ApiException e) {
          Console.WriteLine(e.ToString());
        }
      label: CSHARP
    - lang: Go
      source: |
        var context = context.Background()
        context = context.WithValue(suite.ctx, lob.ContextBasicAuth, lob.BasicAuth{UserName: os.Getenv("<YOUR_API_KEY>")})

        var apiClient = *lob.NewAPIClient(configuration)

        deletedPostcard, _, err := apiClient.PostcardsApi.Delete(context, "psc_5c002b86ce47537a").Execute()

        if err != nil {
            return err
        }
      label: GO
