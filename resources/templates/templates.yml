get:
  operationId: templates_list

  summary: List

  description: >-
    Returns a list of your templates. The templates are returned sorted by
    creation date, with the most recently created templates appearing first.

  tags:
    - Templates

  parameters:
    - $ref: "../../shared/parameters/limit.yml"
    - $ref: "../../shared/parameters/before_after.yml"
    - $ref: "../../shared/parameters/include.yml"
    - $ref: "../../shared/parameters/date_created.yml"
    - $ref: "../../shared/parameters/metadata.yml"

  responses:
    "200":
      $ref: responses/all_templates.yml

    default:
      $ref: "../../shared/responses/template_error.yml"

  x-codeSamples:
    - lang: Shell
      source: |
        curl -X GET "https://api.lob.com/v1/templates?limit=2" \
          -u test_0dc8d51e0acffcb1880e0f19c79b2f5b0cc:
      label: CURL
    - lang: Typescript
      source: |
        try {
          const templates = await new TemplatesApi(config).list(2);
        } catch (err: any) {
          console.error(err);
        }
      label: TYPESCRIPT
    - lang: Javascript
      source: |
        This feature is not currently supported by this library.
      label: NODE
    - lang: Ruby
      source: |
        templatesApi = TemplatesApi.new(config)

        begin
          templates = templatesApi.list({ limit: 2 })
        rescue => err
          p err.message
        end
      label: RUBY
    - lang: Python
      source: |
        with ApiClient(configuration) as api_client:
          api = TemplatesApi(api_client)

        try:
          templates = api.list(limit=2)
        except ApiException as e:
          print(e)
      label: PYTHON
    - lang: PHP
      source: |
        $apiInstance = new OpenAPI\Client\Api\TemplatesApi($config, new GuzzleHttp\Client());

        try {
            $result = $apiInstance->list(
              2, // limit
            );
        } catch (Exception $e) {
            echo $e->getMessage(), PHP_EOL;
        }
    - lang: Java
      source: |
        TemplatesApi apiInstance = new TemplatesApi(config);

        try {
          List response = apiInstance.list(
            2, // limit
            null, // before
            null, // after
            null, // include
            null, // dateCreated
            null, // metadata
            null // size
          );
        } catch (ApiException e) {
          e.printStackTrace();
        }
      label: JAVA
    - lang: Elixir
      source: |
        This feature is not currently supported by this library.
      label: ELIXIR
    - lang: CSharp
      source: |
        TemplatesApi api = new TemplatesApi(config);

        List<string> includeList = new List<string>();
        includeList.Add("total_count");
        Dictionary<String, String> metadata = new Dictionary<String, String>();
        metadata.Add("name", "Harry");
        Dictionary<String, DateTime> dateCreated = new Dictionary<String, DateTime>();
        DateTime dateCreatedDate = DateTime.Today.AddMonths(-1);
        dateCreated.Add("lt", dateCreatedDate);

        try {
          TemplateList response = api.list(
            2, // limit
            null, // before
            null, // after
            includeList, // include
            dateCreated, // dateCreated
            metadata // metadata
          );
        } catch (ApiException e) {
          Console.WriteLine(e.ToString());
        }
      label: CSHARP

post:
  operationId: create_template

  summary: Create

  description: >-
    Creates a new template for use with the Print & Mail API. In Live mode,
    you can only have as many non-deleted templates as allotted in your
    current <a href="https://dashboard.lob.com/#/settings/editions" target="_blank">Print & Mail Edition</a>.
    If you attempt to create a template past your limit, you will receive a
    `403` error. There is no limit in Test mode.

  tags:
    - Templates

  requestBody:
    required: true
    content:
      application/json:
        schema:
          $ref: "models/template_writable.yml"
        example:
          description: demo
          html: "<html>HTML for {{name}}</html>"
          metadata:
            spiffy: "true"
          engine: handlebars

      application/x-www-form-urlencoded:
        schema:
          $ref: "models/template_writable.yml"
        example:
          description: demo
          html: "<html>HTML for {{name}}</html>"
          metadata:
            spiffy: "true"
          engine: handlebars

      multipart/form-data:
        schema:
          $ref: "models/template_writable.yml"
        example:
          description: demo
          html: "<html>HTML for {{name}}</html>"
          metadata:
            spiffy: "true"
          engine: handlebars

  responses:
    "200":
      description: Returns a template object

      headers:
        ratelimit-limit:
          $ref: "../../shared/headers/ratelimit.yml#/ratelimit-limit"
        ratelimit-remaining:
          $ref: "../../shared/headers/ratelimit.yml#/ratelimit-remaining"
        ratelimit-reset:
          $ref: "../../shared/headers/ratelimit.yml#/ratelimit-reset"

      content:
        $ref: responses/template.yml

    default:
      $ref: "../../shared/responses/template_error.yml"

  x-codeSamples:
    - lang: Shell
      source: |
        curl https://api.lob.com/v1/templates \
          -u test_0dc8d51e0acffcb1880e0f19c79b2f5b0cc: \
          -d "description=Test Template" \
          --data-urlencode "html=<html>HTML for {{name}}</html>"
      label: CURL
    - lang: Typescript
      source: |
        const templateCreate = new TemplateWritable({
          description: 'Newer Template',
          html: '<html>Updated HTML for {{name}}</html>'
        });

        try {
          const myTemplate = await new TemplatesApi(config).create(templateCreate);
        } catch (err: any) {
          console.error(err);
        }
      label: TYPESCRIPT
    - lang: Javascript
      source: |
        This feature is not currently supported by this library.
      label: NODE
    - lang: Ruby
      source: |
        templateCreate = TemplateWritable.new({
          description: "Test Template",
          html: "<html>HTML for {{name}}</html>",
        });

        templateApi = TemplatesApi.new(config)

        begin
          createdTemplate = templateApi.create(templateCreate)
        rescue => err
          p err.message
        end
      label: RUBY
    - lang: Python
      source: |
        template_writable = TemplateWritable(
          description = "Test Template",
          html = "<html>HTML for {{name}}</html>",
        )

        with ApiClient(configuration) as api_client:
          api = TemplatesApi(api_client)

        try:
          created_template = api.create(template_writable)
        except ApiException as e:
          print(e)
      label: PYTHON
    - lang: PHP
      source: |
        $apiInstance = new OpenAPI\Client\Api\TemplatesApi($config, new GuzzleHttp\Client());
        $template_writable = new OpenAPI\Client\Model\TemplateWritable(
          array(
            "description"     => "Test Template",
            "html"     => "<html>HTML for {{name}}</html>",
          )
        );

        try {
            $result = $apiInstance->create($template_writable);
        } catch (Exception $e) {
            echo $e->getMessage(), PHP_EOL;
        }
    - lang: Java
      source: |
        TemplatesApi apiInstance = new TemplatesApi(config);

        try {
          TemplateWritable  = new TemplateWritable();
          .set("Test Template");
          .set("<html>HTML for {{name}}</html>");

          Template result = apiInstance.create();
        } catch (ApiException e) {
          e.printStackTrace();
        }
      label: JAVA
    - lang: Elixir
      source: |
        This feature is not currently supported by this library.
      label: ELIXIR
    - lang: CSharp
      source: |
        TemplatesApi api = new TemplatesApi(config);

        TemplateWritable templateWritable = new TemplateWritable(
          "Test Template",  // description
          "<html>HTML for {{name}}</html>" // html
        );

        try {
          Template result = api.create(templateWritable);
        } catch (ApiException e) {
          Console.WriteLine(e.ToString());
        }
      label: CSHARP
