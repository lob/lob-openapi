parameters:
  - in: path
    name: upl_id
    description: id of the upload
    required: true
    schema:
      $ref: "attributes/upl_id.yml"

get:
  operationId: upload_retrieve

  summary: Retrieve

  description: >-
    Retrieves the details of an existing upload. You need only supply
    the unique upload identifier that was returned upon upload creation.

  tags:
    - Uploads

  responses:
    "200":
      description: Returns an upload object
      content:
        $ref: "responses/upload.yml"
    "404":
      $ref: "responses/upload_not_found.yml"
    "422":
      $ref: "responses/upload_validation_error.yml"

  x-codeSamples:
    - lang: Shell
      source: |
        curl https://api.lob.com/v1/uploads/upl_71be866e430b11e9 \
          -u <YOUR API KEY>: \
      label: CURL
    - lang: Ruby
      source: |
        uploadApi = UploadsApi.new(config)

        begin
          retrievedUpload = uploadApi.get_upload("upl_71be866e430b11e9")
        rescue => err
          p err.message
        end
      label: RUBY

patch:
  operationId: upload_update

  summary: Update

  description: >-
    Update the details of an existing upload. You need only supply
    the unique identifier that was returned upon upload creation.

  tags:
    - Uploads

  requestBody:
    required: true
    content:
      application/json:
        schema:
          $ref: "models/upload_updatable.yml"
  responses:
    "200":
      description: Returns an upload object
      content:
        $ref: "responses/upload.yml"
    "404":
      $ref: "responses/upload_not_found.yml"
    "422":
      $ref: "responses/upload_validation_error.yml"

  x-codeSamples:
    - lang: Shell
      source: |
        curl -X PATCH https://api.lob.com/v1/uploads/upl_71be866e430b11e9 \
          -u <YOUR API KEY>: \
          -d "state=Ready for Validation"
      label: CURL
    - lang: Python
      source: |
        upload_updatable = UploadUpdatable(
          state = UploadState("Ready for Validation"),
        )

        with ApiClient(configuration) as api_client:
          api = UploadsApi(api_client)

        try:
          updated_upload = api.update_upload("upl_71be866e430b11e9", upload_updatable)
        except ApiException as e:
          print(e)
      label: PYTHON
    - lang: Ruby
      source: |
        uploadUpdatable = UploadUpdatable.new({
          required_address_column_mapping: RequiredAddressColumnMapping.new({
            name: "recipient",
            address_line1: "primary line",
            address_city: "city",
            address_state: "state",
            address_zip: "zip_code",
          }),
        })

        uploadApi = UploadsApi.new(config)

        begin
          updatedUpload = uploadApi.update_upload("upl_71be866e430b11e9", uploadUpdatable)
        rescue => err
          p err.message
        end
      label: RUBY

delete:
  operationId: "upload_delete"

  summary: Delete

  description: >-
    Delete an existing upload. You need only supply
    the unique identifier that was returned upon upload creation.

  tags:
    - Uploads

  responses:
    "204":
      description: Successful Response

  x-codeSamples:
    - lang: Shell
      source: |
        curl -X DELETE https://api.lob.com/v1/uploads/upl_71be866e430b11e9 \
          -u <YOUR API KEY>:
      label: CURL
    - lang: Ruby
      source: |
        uploadApi = UploadsApi.new(config)

        begin
          deletedUpload = uploadApi.delete_upload("upl_71be866e430b11e9")
        rescue => err
          p err.message
        end
      label: RUBY
