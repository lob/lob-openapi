post:
  operationId: autocompletion

  summary: Autocomplete

  description: >-
    Given an address prefix consisting of a partial primary line, as well as
    optional input of city, state, and zip code, this functionality returns up
    to 10 full US address suggestions. Not all of them will turn out to be valid
    addresses; they'll need to be [verified](#operation/verification_us).

  tags:
    - US Autocompletions
  parameters:
    - in: query
      name: case
      schema:
        type: string
        enum:
          - upper
          - proper
        default: upper
      description: >-
        Casing of the verified address. Possible values are `upper` and `proper` for
        uppercased (e.g. "PO BOX") and proper-cased (e.g. "PO Box"),
        respectively. Only affects `primary_line`, 
        `city`, and `state`. Default casing is `upper`.
      required: false
    - in: query
      name: valid_addresses
      schema:
        type: boolean
        enum:
          - true
          - false
        default: false
      description: >-
        Possible values are `true` and `false`.
        If false, not all of the suggestions in the response will be valid addresses; they'll need to be verified in order to determine the deliverability. 
        The valid_addresses flag will greatly reduce the number of keystrokes needed before reaching an intended address.
      required: false

  requestBody:
    required: true
    content:
      application/json:
        schema:
          $ref: "models/us_autocompletions_writable.yml"
        examples:
          basic:
            value:
              address_prefix: 185 B
              city: San Francisco
              state: CA
              zip_code: "94107"
              geo_ip_sort: false
          test:
            value:
              address_prefix: 1 sugg

      application/x-www-form-urlencoded:
        schema:
          $ref: "models/us_autocompletions_writable.yml"
        examples:
          basic:
            value:
              address_prefix: 185 B
              city: San Francisco
              state: CA
              zip_code: "94107"
              geo_ip_sort: false
          test:
            value:
              address_prefix: 1 sugg

      multipart/form-data:
        schema:
          $ref: "models/us_autocompletions_writable.yml"
        examples:
          basic:
            value:
              address_prefix: 185 B
              city: San Francisco
              state: CA
              zip_code: "94107"
              geo_ip_sort: false
          test:
            value:
              address_prefix: 1 sugg

  responses:
    "200":
      $ref: "responses/us_autocompletions.yml"

    default:
      $ref: "responses/us_autocompletions_error.yml"

  x-codeSamples:
    - lang: Shell
      source: |
        curl https://api.lob.com/v1/us_autocompletions \
          -u <YOUR_LIVE_API_KEY>: \
          -d "address_prefix=185 B" \
          -d "city=San Francisco" \
          -d "state=CA"
          -d "zip_code=94107"
      label: CURL
    - lang: Typescript
      source: |
        const UsAutocompletions = new USAutocompletionsApi(av_config);
        const autocompletionData: UsAutocompletionsWritable = {
          address_prefix: '185 B',
          city: 'SAN FRANCISCO'
        };

        try {
          const autocompletedAddresses = await UsAutocompletions.autocomplete(autocompletionData);
        } catch (err: any) {
          console.error(err);
        }
      label: TYPESCRIPT
    - lang: Javascript
      source: |
        Lob.usAutocompletions.autocomplete({
          address_prefix: '185 B',
          city: 'San Francisco',
          state: 'CA',
          zip_code: '94107',
        }, function (err, res) {
          console.log(err, res);
        });
      label: NODE
    - lang: Ruby
      source: |
        @lob.us_autocompletions.autocomplete(
          address_prefix: "185 B",
          city:           "San Francisco",
          state:          "CA",
          zip_code:       "94107"
        )
      label: RUBY
    - lang: Python
      source: |
        lob.USAutocompletion.create(
          address_prefix='185 B',
          city='San Francisco',
          state='CA',
          zip_code='94107'
        )
      label: PYTHON
    - lang: PHP
      source: |
        $apiInstance = new OpenAPI\Client\Api\UsAutocompletionsApi($config, new GuzzleHttp\Client());

        $autocompletionData = new OpenAPI\Client\Model\UsAutocompletionsWritable(array(
            "address_prefix" =>  "185 B",
            "city" =>  "San Francisco",
            "state" =>  "CA",
            "zip_code" =>  "94017",
        ));

        try {
            $result = $apiInstance->autocomplete($autocompletionData);
        } catch (Exception $e) {
            echo $e->getMessage(), PHP_EOL;
        }
    - lang: Java
      source: |
        UsAutocompletionsApi apiInstance = new UsAutocompletionsApi(config);
        UsAutocompletionsWritable autoCompletionWritable = new UsAutocompletionsWritable(); 
        autoCompletionWritable.setAddressPrefix("185 B");
        autoCompletionWritable.setCity("San Francisco");
        autoCompletionWritable.setState("CA");
        autoCompletionWritable.setZipCode("94017");

        try {
          UsAutocompletions usAutocompletion = apiInstance.autocomplete(autoCompletionWritable);
        } catch (ApiException e) {
          e.printStackTrace();
        }
      label: JAVA
    - lang: Elixir
      source: |
        Lob.USAutocompletion.autocomplete(%{
          address_prefix: "185 B",
          city:           "San Francisco",
          state:          "CA",
          zip_code:       "94107"
        })
      label: ELIXIR
    - lang: CSharp
      source: |
        UsAutocompletionsApi api = new UsAutocompletionsApi(config);
        UsAutocompletionsWritable autoCompletionWritable = new UsAutocompletionsWritable(
          "185 B",  // address_prefix 
          "San Francisco",  // city 
          "CA",  // state 
          "94017" // zip_code 
        );

        try {
          UsAutocompletions usAutocompletion = api.autocomplete(autoCompletionWritable);
        } catch (ApiException e) {
          Console.WriteLine(e.ToString());
        }
      label: CSHARP
